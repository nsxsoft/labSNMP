#
# PySNMP MIB module TRIPPLITE-PRODUCTS (http://pysnmp.sf.net)
# ASN.1 source file://./TRIPPLITE-PRODUCTS.MIB
# Produced by pysmi-0.2.2 at Wed Apr 11 14:12:10 2018
# On host Tim platform Linux version 4.15.15-1-ARCH by user syp
# Using Python version 2.7.13 (default, Oct 26 2017, 17:04:19) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Bits, TimeTicks, Counter64, Unsigned32, enterprises, ModuleIdentity, Gauge32, iso, ObjectIdentity, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Bits", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "IpAddress", "Counter32")
DisplayString, TruthValue, RowStatus, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention", "TimeStamp")
tripplite, = mibBuilder.importSymbols("TRIPPLITE", "tripplite")
tlpProducts = ModuleIdentity((1, 3, 6, 1, 4, 1, 850, 1))
tlpProducts.setRevisions(('2016-06-22 11:15', '2016-02-02 11:15', '2016-01-25 12:30', '2016-01-20 12:00', '2016-01-08 11:40', '2015-11-25 13:00', '2015-11-10 13:00', '2015-10-16 12:30', '2015-08-19 12:00', '2014-12-04 10:00', '2014-04-14 09:00',))
if mibBuilder.loadTexts: tlpProducts.setLastUpdated('201606221115Z')
if mibBuilder.loadTexts: tlpProducts.setOrganization('Tripp Lite')
tlpHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1))
tlpSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2))
tlpAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3))
tlpNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 4))
tlpDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 1))
tlpDeviceDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 2))
tlpDeviceTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3))
tlpUps = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1))
tlpPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2))
tlpEnvirosense = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3))
tlpAts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4))
tlpCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5))
tlpKvm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6))
tlpRackTrack = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7))
tlpSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8))
tlpUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1))
tlpUpsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2))
tlpUpsDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3))
tlpUpsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4))
tlpUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5))
tlpUpsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1))
tlpUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2))
tlpUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3))
tlpUpsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4))
tlpUpsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5))
tlpUpsWatchdog = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6))
tlpPduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1))
tlpPduDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2))
tlpPduDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3))
tlpPduControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4))
tlpPduConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 5))
tlpPduInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1))
tlpPduOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2))
tlpPduOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3))
tlpPduCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4))
tlpPduBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5))
tlpPduHeatsink = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6))
tlpEnvIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1))
tlpEnvDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3))
tlpEnvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5))
tlpAtsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1))
tlpAtsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2))
tlpAtsDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3))
tlpAtsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4))
tlpAtsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5))
tlpAtsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1))
tlpAtsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2))
tlpAtsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3))
tlpAtsCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4))
tlpAtsBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5))
tlpAtsHeatsink = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6))
tlpCoolingIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1))
tlpCoolingDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 2))
tlpCoolingDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 3))
tlpCoolingControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 4))
tlpCoolingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 5))
tlpCoolingInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 3, 1))
tlpCoolingOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 3, 2))
tlpKvmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 1))
tlpKvmDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 2))
tlpKvmDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 3))
tlpKvmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 4))
tlpKvmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 5))
tlpRackTrackIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 1))
tlpRackTrackDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 2))
tlpRackTrackDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 3))
tlpRackTrackControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 4))
tlpRackTrackConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 5))
tlpSwitchIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 1))
tlpSwitchDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 2))
tlpSwitchDetail = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 3))
tlpSwitchControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 4))
tlpSwitchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 5))
tlpAgentDetails = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1))
tlpAgentSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 2))
tlpAgentContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 3))
tlpAgentIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1))
tlpAgentAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2))
tlpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 2, 1))
tlpAgentEmailContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1))
tlpAgentSnmpContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2))
tlpAlarmsWellKnown = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3))
tlpAlarmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 4))
tlpAgentAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 1))
tlpDeviceAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2))
tlpUpsAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3))
tlpPduAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4))
tlpEnvAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5))
tlpAtsAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6))
tlpCoolingAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7))
tlpKvmAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 8))
tlpRackTrackAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 9))
tlpSwitchAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 10))
tlpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 4, 1))
tlpDeviceNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceNumDevices.setStatus('current')
tlpDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2), )
if mibBuilder.loadTexts: tlpDeviceTable.setStatus('current')
tlpDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpDeviceEntry.setStatus('current')
tlpDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIndex.setStatus('current')
tlpDeviceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceRowStatus.setStatus('current')
tlpDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceType.setStatus('current')
tlpDeviceManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceManufacturer.setStatus('current')
tlpDeviceModel = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceModel.setStatus('current')
tlpDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceName.setStatus('current')
tlpDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceID.setStatus('current')
tlpDeviceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceLocation.setStatus('current')
tlpDeviceRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceRegion.setStatus('current')
tlpDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7)).clone(namedValues=NamedValues(("none", 0), ("critical", 1), ("warning", 2), ("info", 3), ("status", 4), ("offline", 5), ("custom", 6), ("configuration", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceStatus.setStatus('current')
tlpDeviceIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1), )
if mibBuilder.loadTexts: tlpDeviceIdentTable.setStatus('current')
tlpDeviceIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpDeviceIdentEntry.setStatus('current')
tlpDeviceIdentProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentProtocol.setStatus('current')
tlpDeviceIdentCommPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("unknown", 0), ("serial", 1), ("usb", 2), ("hid", 3), ("simulated", 4), ("unittest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentCommPortType.setStatus('current')
tlpDeviceIdentCommPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentCommPortName.setStatus('current')
tlpDeviceIdentFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentFirmwareVersion.setStatus('current')
tlpDeviceIdentSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentSerialNum.setStatus('current')
tlpDeviceIdentDateInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpDeviceIdentDateInstalled.setStatus('current')
tlpDeviceIdentHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentHardwareVersion.setStatus('current')
tlpDeviceIdentCurrentUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentCurrentUptime.setStatus('current')
tlpDeviceIdentTotalUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpDeviceIdentTotalUptime.setStatus('current')
tlpUpsIdentNumUps = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumUps.setStatus('current')
tlpUpsIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2), )
if mibBuilder.loadTexts: tlpUpsIdentTable.setStatus('current')
tlpUpsIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsIdentEntry.setStatus('current')
tlpUpsIdentNumInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumInputs.setStatus('current')
tlpUpsIdentNumOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumOutputs.setStatus('current')
tlpUpsIdentNumBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumBypass.setStatus('current')
tlpUpsIdentNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumPhases.setStatus('current')
tlpUpsIdentNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumOutlets.setStatus('current')
tlpUpsIdentNumOutletGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumOutletGroups.setStatus('current')
tlpUpsIdentNumBatteryPacks = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsIdentNumBatteryPacks.setStatus('current')
tlpUpsSupportsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3), )
if mibBuilder.loadTexts: tlpUpsSupportsTable.setStatus('current')
tlpUpsSupportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsSupportsEntry.setStatus('current')
tlpUpsSupportsEnergywise = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsEnergywise.setStatus('current')
tlpUpsSupportsRampShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsRampShed.setStatus('current')
tlpUpsSupportsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsOutletGroup.setStatus('current')
tlpUpsSupportsOutletCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsOutletCurrentPower.setStatus('current')
tlpUpsSupportsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSupportsOutletVoltage.setStatus('current')
tlpUpsDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1), )
if mibBuilder.loadTexts: tlpUpsDeviceTable.setStatus('current')
tlpUpsDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsDeviceEntry.setStatus('current')
tlpUpsDeviceMainLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceMainLoadState.setStatus('current')
tlpUpsDeviceMainLoadControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceMainLoadControllable.setStatus('current')
tlpUpsDeviceMainLoadCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsDeviceMainLoadCommand.setStatus('current')
tlpUpsDevicePowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsDevicePowerOnDelay.setStatus('current')
tlpUpsDeviceTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceTestDate.setStatus('current')
tlpUpsDeviceTestResultsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("noTest", 0), ("doneAndPassed", 1), ("doneAndWarning", 2), ("doneAndError", 3), ("aborted", 4), ("inProgress", 5), ("noTestInitiated", 6), ("badBattery", 7), ("overCurrent", 8), ("batteryFailed", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceTestResultsStatus.setStatus('current')
tlpUpsDeviceTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 7), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceTemperatureC.setStatus('current')
tlpUpsDeviceTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 2, 1, 1, 8), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsDeviceTemperatureF.setStatus('current')
tlpUpsBatterySummaryTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1), )
if mibBuilder.loadTexts: tlpUpsBatterySummaryTable.setStatus('current')
tlpUpsBatterySummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsBatterySummaryEntry.setStatus('current')
tlpUpsBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryDepleted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryStatus.setStatus('current')
tlpUpsSecondsOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsSecondsOnBattery.setStatus('current')
tlpUpsEstimatedMinutesRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 3), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsEstimatedMinutesRemaining.setStatus('current')
tlpUpsEstimatedChargeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsEstimatedChargeRemaining.setStatus('current')
tlpUpsBatteryRunTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryRunTimeRemaining.setStatus('current')
tlpUpsBatteryDetailTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2), )
if mibBuilder.loadTexts: tlpUpsBatteryDetailTable.setStatus('current')
tlpUpsBatteryDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsBatteryDetailEntry.setStatus('current')
tlpUpsBatteryDetailVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 1), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailVoltage.setStatus('current')
tlpUpsBatteryDetailCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 2), Unsigned32()).setUnits('0.1 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailCurrent.setStatus('current')
tlpUpsBatteryDetailCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailCapacity.setStatus('current')
tlpUpsBatteryDetailCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("floating", 0), ("charging", 1), ("resting", 2), ("discharging", 3), ("normal", 4), ("standby", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailCharge.setStatus('current')
tlpUpsBatteryDetailChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("ok", 0), ("inFaultCondition", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryDetailChargerStatus.setStatus('current')
tlpUpsBatteryPackIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3), )
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentTable.setStatus('current')
tlpUpsBatteryPackIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsBatteryPackIdentIndex"))
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentEntry.setStatus('current')
tlpUpsBatteryPackIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentIndex.setStatus('current')
tlpUpsBatteryPackIdentManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentManufacturer.setStatus('current')
tlpUpsBatteryPackIdentModel = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentModel.setStatus('current')
tlpUpsBatteryPackIdentSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentSerialNum.setStatus('current')
tlpUpsBatteryPackIdentFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentFirmware.setStatus('current')
tlpUpsBatteryPackIdentSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackIdentSKU.setStatus('current')
tlpUpsBatteryPackConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4), )
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigTable.setStatus('current')
tlpUpsBatteryPackConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsBatteryPackIdentIndex"))
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigEntry.setStatus('current')
tlpUpsBatteryPackConfigChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("leadAcid", 1), ("nickelCadmium", 2), ("lithiumIon", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigChemistry.setStatus('current')
tlpUpsBatteryPackConfigStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("nonsmart", 1), ("smart", 2), ("bms", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigStyle.setStatus('current')
tlpUpsBatteryPackConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigLocation.setStatus('current')
tlpUpsBatteryPackConfigStrings = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigStrings.setStatus('current')
tlpUpsBatteryPackConfigBatteriesPerString = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigBatteriesPerString.setStatus('current')
tlpUpsBatteryPackConfigCellsPerBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 4, 6)).clone(namedValues=NamedValues(("unknown", 0), ("one", 1), ("two", 2), ("four", 4), ("six", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigCellsPerBattery.setStatus('current')
tlpUpsBatteryPackConfigNumBatteries = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigNumBatteries.setStatus('current')
tlpUpsBatteryPackConfigCapacityUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("mAHr", 0), ("mWHr", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigCapacityUnits.setStatus('current')
tlpUpsBatteryPackConfigDesignCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigDesignCapacity.setStatus('current')
tlpUpsBatteryPackConfigCellCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigCellCapacity.setStatus('current')
tlpUpsBatteryPackConfigMinCellVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigMinCellVoltage.setStatus('current')
tlpUpsBatteryPackConfigMaxCellVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackConfigMaxCellVoltage.setStatus('current')
tlpUpsBatteryPackDetailTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5), )
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailTable.setStatus('current')
tlpUpsBatteryPackDetailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsBatteryPackIdentIndex"))
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailEntry.setStatus('current')
tlpUpsBatteryPackDetailCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("weak", 2), ("bad", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailCondition.setStatus('current')
tlpUpsBatteryPackDetailTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 2), Unsigned32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailTemperatureC.setStatus('current')
tlpUpsBatteryPackDetailTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 3), Unsigned32()).setUnits('0.1 degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailTemperatureF.setStatus('current')
tlpUpsBatteryPackDetailAge = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 4), Unsigned32()).setUnits('0.1 Years').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailAge.setStatus('current')
tlpUpsBatteryPackDetailLastReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailLastReplaceDate.setStatus('current')
tlpUpsBatteryPackDetailNextReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailNextReplaceDate.setStatus('current')
tlpUpsBatteryPackDetailCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBatteryPackDetailCycleCount.setStatus('current')
tlpUpsInputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1), )
if mibBuilder.loadTexts: tlpUpsInputTable.setStatus('current')
tlpUpsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsInputEntry.setStatus('current')
tlpUpsInputLineBads = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputLineBads.setStatus('current')
tlpUpsInputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputNominalVoltage.setStatus('current')
tlpUpsInputNominalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputNominalFrequency.setStatus('current')
tlpUpsInputLowTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputLowTransferVoltage.setStatus('current')
tlpUpsInputLowTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 5), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputLowTransferVoltageLowerBound.setStatus('current')
tlpUpsInputLowTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 6), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputLowTransferVoltageUpperBound.setStatus('current')
tlpUpsInputHighTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 7), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputHighTransferVoltage.setStatus('current')
tlpUpsInputHighTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 8), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputHighTransferVoltageLowerBound.setStatus('current')
tlpUpsInputHighTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 1, 1, 9), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputHighTransferVoltageUpperBound.setStatus('current')
tlpUpsInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2), )
if mibBuilder.loadTexts: tlpUpsInputPhaseTable.setStatus('current')
tlpUpsInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsInputPhaseIndex"))
if mibBuilder.loadTexts: tlpUpsInputPhaseEntry.setStatus('current')
tlpUpsInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhaseIndex.setStatus('current')
tlpUpsInputPhaseFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 2), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhaseFrequency.setStatus('current')
tlpUpsInputPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 3), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhaseVoltage.setStatus('current')
tlpUpsInputPhaseVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 4), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsInputPhaseVoltageMin.setStatus('current')
tlpUpsInputPhaseVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 5), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsInputPhaseVoltageMax.setStatus('current')
tlpUpsInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 6), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhaseCurrent.setStatus('current')
tlpUpsInputPhasePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 2, 2, 1, 7), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsInputPhasePower.setStatus('current')
tlpUpsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1), )
if mibBuilder.loadTexts: tlpUpsOutputTable.setStatus('current')
tlpUpsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsOutputEntry.setStatus('current')
tlpUpsOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("boosting", 6), ("reducing", 7), ("second", 8), ("economy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputSource.setStatus('current')
tlpUpsOutputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputNominalVoltage.setStatus('current')
tlpUpsOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 1, 1, 3), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputFrequency.setStatus('current')
tlpUpsOutputLineTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2), )
if mibBuilder.loadTexts: tlpUpsOutputLineTable.setStatus('current')
tlpUpsOutputLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsOutputLineIndex"))
if mibBuilder.loadTexts: tlpUpsOutputLineEntry.setStatus('current')
tlpUpsOutputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLineIndex.setStatus('current')
tlpUpsOutputLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 2), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLineVoltage.setStatus('current')
tlpUpsOutputLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 3), Unsigned32()).setUnits('0.1 Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLineCurrent.setStatus('current')
tlpUpsOutputLinePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 4), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLinePower.setStatus('current')
tlpUpsOutputLinePercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLinePercentLoad.setStatus('current')
tlpUpsOutputLineFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 3, 2, 1, 6), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutputLineFrequency.setStatus('current')
tlpUpsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 1), )
if mibBuilder.loadTexts: tlpUpsBypassTable.setStatus('current')
tlpUpsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsBypassEntry.setStatus('current')
tlpUpsBypassFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 1, 1, 1), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassFrequency.setStatus('current')
tlpUpsBypassLineTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2), )
if mibBuilder.loadTexts: tlpUpsBypassLineTable.setStatus('current')
tlpUpsBypassLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsBypassLineIndex"))
if mibBuilder.loadTexts: tlpUpsBypassLineEntry.setStatus('current')
tlpUpsBypassLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassLineIndex.setStatus('current')
tlpUpsBypassLineVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1, 2), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassLineVoltage.setStatus('current')
tlpUpsBypassLineCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1, 3), Unsigned32()).setUnits('0.1 Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassLineCurrent.setStatus('current')
tlpUpsBypassLinePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 4, 2, 1, 4), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsBypassLinePower.setStatus('current')
tlpUpsOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1), )
if mibBuilder.loadTexts: tlpUpsOutletTable.setStatus('current')
tlpUpsOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsOutletIndex"))
if mibBuilder.loadTexts: tlpUpsOutletEntry.setStatus('current')
tlpUpsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletIndex.setStatus('current')
tlpUpsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletName.setStatus('current')
tlpUpsOutletDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletDescription.setStatus('current')
tlpUpsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletState.setStatus('current')
tlpUpsOutletControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletControllable.setStatus('current')
tlpUpsOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletCommand.setStatus('current')
tlpUpsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 7), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletVoltage.setStatus('current')
tlpUpsOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 8), Unsigned32()).setUnits('0.01 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletCurrent.setStatus('current')
tlpUpsOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletPower.setStatus('current')
tlpUpsOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("remainOff", 0), ("turnOnAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletRampAction.setStatus('current')
tlpUpsOutletRampDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 11), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletRampDelay.setStatus('current')
tlpUpsOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("remainOn", 0), ("turnOffAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletShedAction.setStatus('current')
tlpUpsOutletShedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 13), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletShedDelay.setStatus('current')
tlpUpsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroup.setStatus('current')
tlpUpsOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2), )
if mibBuilder.loadTexts: tlpUpsOutletGroupTable.setStatus('current')
tlpUpsOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpUpsOutletGroupIndex"))
if mibBuilder.loadTexts: tlpUpsOutletGroupEntry.setStatus('current')
tlpUpsOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletGroupIndex.setStatus('current')
tlpUpsOutletGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroupRowStatus.setStatus('current')
tlpUpsOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroupName.setStatus('current')
tlpUpsOutletGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroupDescription.setStatus('current')
tlpUpsOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsOutletGroupState.setStatus('current')
tlpUpsOutletGroupCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsOutletGroupCommand.setStatus('current')
tlpUpsWatchdogTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6, 1), )
if mibBuilder.loadTexts: tlpUpsWatchdogTable.setStatus('current')
tlpUpsWatchdogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsWatchdogEntry.setStatus('current')
tlpUpsWatchdogSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpUpsWatchdogSupported.setStatus('current')
tlpUpsWatchdogSecsBeforeReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 3, 6, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsWatchdogSecsBeforeReboot.setStatus('current')
tlpUpsControlTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1), )
if mibBuilder.loadTexts: tlpUpsControlTable.setStatus('current')
tlpUpsControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsControlEntry.setStatus('current')
tlpUpsControlSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlSelfTest.setStatus('current')
tlpUpsControlRamp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlRamp.setStatus('current')
tlpUpsControlShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlShed.setStatus('current')
tlpUpsControlUpsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlUpsOn.setStatus('current')
tlpUpsControlUpsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlUpsOff.setStatus('current')
tlpUpsControlUpsReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlUpsReboot.setStatus('current')
tlpUpsControlBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsControlBypass.setStatus('current')
tlpUpsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1), )
if mibBuilder.loadTexts: tlpUpsConfigTable.setStatus('current')
tlpUpsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsConfigEntry.setStatus('current')
tlpUpsConfigInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 1), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigInputVoltage.setStatus('current')
tlpUpsConfigInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 2), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigInputFrequency.setStatus('current')
tlpUpsConfigOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 3), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigOutputVoltage.setStatus('current')
tlpUpsConfigOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 4), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigOutputFrequency.setStatus('current')
tlpUpsConfigAudibleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("muted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAudibleStatus.setStatus('current')
tlpUpsConfigAutoBatteryTest = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4)).clone(namedValues=NamedValues(("disabled", 0), ("biweekly", 1), ("monthly", 2), ("quarterly", 3), ("semiannually", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoBatteryTest.setStatus('current')
tlpUpsConfigAutoRestartAfterShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartAfterShutdown.setStatus('current')
tlpUpsConfigAutoRampOnTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRampOnTransition.setStatus('current')
tlpUpsConfigAutoShedOnTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoShedOnTransition.setStatus('current')
tlpUpsConfigBypassLowerLimitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, -5))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBypassLowerLimitPercent.setStatus('current')
tlpUpsConfigBypassUpperLimitPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 20))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBypassUpperLimitPercent.setStatus('current')
tlpUpsConfigBypassLowerLimitVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 12), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBypassLowerLimitVoltage.setStatus('current')
tlpUpsConfigBypassUpperLimitVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 13), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBypassUpperLimitVoltage.setStatus('current')
tlpUpsConfigColdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigColdStart.setStatus('current')
tlpUpsConfigEconomicMode = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5)).clone(namedValues=NamedValues(("online", 0), ("economy", 1), ("constant50Hz", 2), ("constant60Hz", 3), ("constantAuto", 4), ("autoAdaptive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigEconomicMode.setStatus('current')
tlpUpsConfigFaultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("bypass", 0), ("standby", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigFaultAction.setStatus('current')
tlpUpsConfigOffMode = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("standby", 0), ("bypass", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigOffMode.setStatus('current')
tlpUpsConfigLineSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("normal", 0), ("reduced", 1), ("fullyReduced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigLineSensitivity.setStatus('current')
tlpUpsConfigAutoRestartTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2), )
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartTable.setStatus('current')
tlpUpsConfigAutoRestartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartEntry.setStatus('current')
tlpUpsConfigAutoRestartInverterShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartInverterShutdown.setStatus('current')
tlpUpsConfigAutoRestartDelayedWakeup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartDelayedWakeup.setStatus('current')
tlpUpsConfigAutoRestartLowVoltageCutoff = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartLowVoltageCutoff.setStatus('current')
tlpUpsConfigAutoRestartOverLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartOverLoad.setStatus('current')
tlpUpsConfigAutoRestartOverTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigAutoRestartOverTemperature.setStatus('current')
tlpUpsConfigThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3), )
if mibBuilder.loadTexts: tlpUpsConfigThresholdTable.setStatus('current')
tlpUpsConfigThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpUpsConfigThresholdEntry.setStatus('current')
tlpUpsConfigBatteryAgeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1, 1), Unsigned32()).setUnits('months').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigBatteryAgeThreshold.setStatus('current')
tlpUpsConfigLowBatteryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 95))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigLowBatteryThreshold.setStatus('current')
tlpUpsConfigLowBatteryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigLowBatteryTime.setStatus('current')
tlpUpsConfigOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 105))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpUpsConfigOverLoadThreshold.setStatus('current')
tlpPduIdentNumPdu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumPdu.setStatus('current')
tlpPduIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2), )
if mibBuilder.loadTexts: tlpPduIdentTable.setStatus('current')
tlpPduIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduIdentEntry.setStatus('current')
tlpPduIdentNumInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumInputs.setStatus('current')
tlpPduIdentNumOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumOutputs.setStatus('current')
tlpPduIdentNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumPhases.setStatus('current')
tlpPduIdentNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumOutlets.setStatus('current')
tlpPduIdentNumOutletGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumOutletGroups.setStatus('current')
tlpPduIdentNumCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumCircuits.setStatus('current')
tlpPduIdentNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumBreakers.setStatus('current')
tlpPduIdentNumHeatsinks = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduIdentNumHeatsinks.setStatus('current')
tlpPduSupportsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3), )
if mibBuilder.loadTexts: tlpPduSupportsTable.setStatus('current')
tlpPduSupportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduSupportsEntry.setStatus('current')
tlpPduSupportsEnergywise = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsEnergywise.setStatus('current')
tlpPduSupportsRampShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsRampShed.setStatus('current')
tlpPduSupportsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsOutletGroup.setStatus('current')
tlpPduSupportsOutletCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsOutletCurrentPower.setStatus('current')
tlpPduSupportsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduSupportsOutletVoltage.setStatus('current')
tlpPduDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4), )
if mibBuilder.loadTexts: tlpPduDisplayTable.setStatus('current')
tlpPduDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduDisplayEntry.setStatus('current')
tlpPduDisplayScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("schemeReverse", 0), ("schemeNormal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayScheme.setStatus('current')
tlpPduDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("displayNormal", 0), ("displayReverse", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayOrientation.setStatus('current')
tlpPduDisplayAutoScroll = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("scrollDisabled", 0), ("scrollEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayAutoScroll.setStatus('current')
tlpPduDisplayIntensity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("intensity25", 1), ("intensity50", 2), ("intensity75", 3), ("intensity100", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayIntensity.setStatus('current')
tlpPduDisplayUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("metric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDisplayUnits.setStatus('current')
tlpPduDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: tlpPduDeviceTable.setStatus('current')
tlpPduDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduDeviceEntry.setStatus('current')
tlpPduDeviceMainLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceMainLoadState.setStatus('current')
tlpPduDeviceMainLoadControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceMainLoadControllable.setStatus('current')
tlpPduDeviceMainLoadCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDeviceMainLoadCommand.setStatus('current')
tlpPduDevicePowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduDevicePowerOnDelay.setStatus('current')
tlpPduDeviceTotalInputPowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 5), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceTotalInputPowerRating.setStatus('current')
tlpPduDeviceTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 6), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceTemperatureC.setStatus('current')
tlpPduDeviceTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 7), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceTemperatureF.setStatus('current')
tlpPduDevicePhaseImbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDevicePhaseImbalance.setStatus('current')
tlpPduDeviceOutputPowerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceOutputPowerTotal.setStatus('current')
tlpPduDeviceAggregatePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 10), Unsigned32()).setUnits('0.1 Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceAggregatePowerFactor.setStatus('current')
tlpPduDeviceOutputCurrentPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("none", 0), ("tenths", 1), ("hundredths", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduDeviceOutputCurrentPrecision.setStatus('current')
tlpPduInputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1), )
if mibBuilder.loadTexts: tlpPduInputTable.setStatus('current')
tlpPduInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduInputEntry.setStatus('current')
tlpPduInputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputNominalVoltage.setStatus('current')
tlpPduInputNominalVoltagePhaseToPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 2), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputNominalVoltagePhaseToPhase.setStatus('current')
tlpPduInputNominalVoltagePhaseToNeutral = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 3), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputNominalVoltagePhaseToNeutral.setStatus('current')
tlpPduInputLowTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputLowTransferVoltage.setStatus('current')
tlpPduInputLowTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 5), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputLowTransferVoltageLowerBound.setStatus('current')
tlpPduInputLowTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 6), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputLowTransferVoltageUpperBound.setStatus('current')
tlpPduInputHighTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 7), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputHighTransferVoltage.setStatus('current')
tlpPduInputHighTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 8), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputHighTransferVoltageLowerBound.setStatus('current')
tlpPduInputHighTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 9), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputHighTransferVoltageUpperBound.setStatus('current')
tlpPduInputCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 1, 1, 10), Unsigned32()).setUnits('Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputCurrentLimit.setStatus('current')
tlpPduInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2), )
if mibBuilder.loadTexts: tlpPduInputPhaseTable.setStatus('current')
tlpPduInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduInputPhaseIndex"))
if mibBuilder.loadTexts: tlpPduInputPhaseEntry.setStatus('current')
tlpPduInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhaseIndex.setStatus('current')
tlpPduInputPhasePhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhasePhaseType.setStatus('current')
tlpPduInputPhaseFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 3), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhaseFrequency.setStatus('current')
tlpPduInputPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 4), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhaseVoltage.setStatus('current')
tlpPduInputPhaseVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 5), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduInputPhaseVoltageMin.setStatus('current')
tlpPduInputPhaseVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 6), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduInputPhaseVoltageMax.setStatus('current')
tlpPduInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 1, 2, 1, 7), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduInputPhaseCurrent.setStatus('current')
tlpPduOutputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1), )
if mibBuilder.loadTexts: tlpPduOutputTable.setStatus('current')
tlpPduOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduOutputIndex"))
if mibBuilder.loadTexts: tlpPduOutputEntry.setStatus('current')
tlpPduOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputIndex.setStatus('current')
tlpPduOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputPhase.setStatus('current')
tlpPduOutputPhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputPhaseType.setStatus('current')
tlpPduOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 4), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputVoltage.setStatus('current')
tlpPduOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 5), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputCurrent.setStatus('current')
tlpPduOutputCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 6), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputCurrentMin.setStatus('current')
tlpPduOutputCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 7), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputCurrentMax.setStatus('current')
tlpPduOutputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 8), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputActivePower.setStatus('current')
tlpPduOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 9), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputPowerFactor.setStatus('current')
tlpPduOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("none", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutputSource.setStatus('current')
tlpPduOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1), )
if mibBuilder.loadTexts: tlpPduOutletTable.setStatus('current')
tlpPduOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduOutletIndex"))
if mibBuilder.loadTexts: tlpPduOutletEntry.setStatus('current')
tlpPduOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletIndex.setStatus('current')
tlpPduOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletName.setStatus('current')
tlpPduOutletDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletDescription.setStatus('current')
tlpPduOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletState.setStatus('current')
tlpPduOutletControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletControllable.setStatus('current')
tlpPduOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletCommand.setStatus('current')
tlpPduOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 7), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletVoltage.setStatus('current')
tlpPduOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 8), Unsigned32()).setUnits('0.01 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletCurrent.setStatus('current')
tlpPduOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletPower.setStatus('current')
tlpPduOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("remainOff", 0), ("turnOnAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletRampAction.setStatus('current')
tlpPduOutletRampDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 11), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletRampDelay.setStatus('current')
tlpPduOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("remainOn", 0), ("turnOffAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletShedAction.setStatus('current')
tlpPduOutletShedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 13), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletShedDelay.setStatus('current')
tlpPduOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroup.setStatus('current')
tlpPduOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletBank.setStatus('current')
tlpPduOutletCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletCircuit.setStatus('current')
tlpPduOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("unknown", 0), ("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletPhase.setStatus('current')
tlpPduOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2), )
if mibBuilder.loadTexts: tlpPduOutletGroupTable.setStatus('current')
tlpPduOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduOutletGroupIndex"))
if mibBuilder.loadTexts: tlpPduOutletGroupEntry.setStatus('current')
tlpPduOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletGroupIndex.setStatus('current')
tlpPduOutletGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroupRowStatus.setStatus('current')
tlpPduOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroupName.setStatus('current')
tlpPduOutletGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroupDescription.setStatus('current')
tlpPduOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduOutletGroupState.setStatus('current')
tlpPduOutletGroupCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduOutletGroupCommand.setStatus('current')
tlpPduCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1), )
if mibBuilder.loadTexts: tlpPduCircuitTable.setStatus('current')
tlpPduCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduCircuitIndex"))
if mibBuilder.loadTexts: tlpPduCircuitEntry.setStatus('current')
tlpPduCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitIndex.setStatus('current')
tlpPduCircuitPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("unknown", 0), ("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitPhase.setStatus('current')
tlpPduCircuitInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 3), Integer32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitInputVoltage.setStatus('current')
tlpPduCircuitTotalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 4), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitTotalCurrent.setStatus('current')
tlpPduCircuitCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 5), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitCurrentLimit.setStatus('current')
tlpPduCircuitCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 6), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitCurrentMin.setStatus('current')
tlpPduCircuitCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 7), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitCurrentMax.setStatus('current')
tlpPduCircuitTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 8), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitTotalPower.setStatus('current')
tlpPduCircuitPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitPowerFactor.setStatus('current')
tlpPduCircuitUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 4, 1, 1, 10), Unsigned32()).setUnits('0.01 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduCircuitUtilization.setStatus('current')
tlpPduBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5, 1), )
if mibBuilder.loadTexts: tlpPduBreakerTable.setStatus('current')
tlpPduBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduBreakerIndex"))
if mibBuilder.loadTexts: tlpPduBreakerEntry.setStatus('current')
tlpPduBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduBreakerIndex.setStatus('current')
tlpPduBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("open", 0), ("closed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduBreakerStatus.setStatus('current')
tlpPduHeatsinkTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1), )
if mibBuilder.loadTexts: tlpPduHeatsinkTable.setStatus('current')
tlpPduHeatsinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpPduHeatsinkIndex"))
if mibBuilder.loadTexts: tlpPduHeatsinkEntry.setStatus('current')
tlpPduHeatsinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduHeatsinkIndex.setStatus('current')
tlpPduHeatsinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notAvailable", 0), ("available", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduHeatsinkStatus.setStatus('current')
tlpPduHeatsinkTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1, 3), Integer32()).setUnits('0.1 degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduHeatsinkTemperatureC.setStatus('current')
tlpPduHeatsinkTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 3, 6, 1, 1, 4), Integer32()).setUnits('0.1 degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpPduHeatsinkTemperatureF.setStatus('current')
tlpPduControlTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1), )
if mibBuilder.loadTexts: tlpPduControlTable.setStatus('current')
tlpPduControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduControlEntry.setStatus('current')
tlpPduControlRamp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlRamp.setStatus('current')
tlpPduControlShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlShed.setStatus('current')
tlpPduControlPduOn = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlPduOn.setStatus('current')
tlpPduControlPduOff = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlPduOff.setStatus('current')
tlpPduControlPduReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduControlPduReboot.setStatus('current')
tlpPduConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 5, 1), )
if mibBuilder.loadTexts: tlpPduConfigTable.setStatus('current')
tlpPduConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpPduConfigEntry.setStatus('current')
tlpPduConfigInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 2, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpPduConfigInputVoltage.setStatus('current')
tlpEnvIdentNumEnvirosense = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvIdentNumEnvirosense.setStatus('current')
tlpEnvIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2), )
if mibBuilder.loadTexts: tlpEnvIdentTable.setStatus('current')
tlpEnvIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpEnvIdentEntry.setStatus('current')
tlpEnvIdentTempSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvIdentTempSupported.setStatus('current')
tlpEnvIdentHumiditySupported = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvIdentHumiditySupported.setStatus('current')
tlpEnvNumInputContacts = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvNumInputContacts.setStatus('current')
tlpEnvNumOutputContacts = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvNumOutputContacts.setStatus('current')
tlpEnvTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: tlpEnvTemperatureTable.setStatus('current')
tlpEnvTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpEnvTemperatureEntry.setStatus('current')
tlpEnvTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1, 1, 1), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvTemperatureC.setStatus('current')
tlpEnvTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1, 1, 2), Integer32()).setUnits('0.1 degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvTemperatureF.setStatus('current')
tlpEnvTemperatureInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvTemperatureInAlarm.setStatus('current')
tlpEnvHumidityTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 2), )
if mibBuilder.loadTexts: tlpEnvHumidityTable.setStatus('current')
tlpEnvHumidityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpEnvHumidityEntry.setStatus('current')
tlpEnvHumidityHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvHumidityHumidity.setStatus('current')
tlpEnvHumidityInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvHumidityInAlarm.setStatus('current')
tlpEnvInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3), )
if mibBuilder.loadTexts: tlpEnvInputContactTable.setStatus('current')
tlpEnvInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpEnvInputContactIndex"))
if mibBuilder.loadTexts: tlpEnvInputContactEntry.setStatus('current')
tlpEnvInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvInputContactIndex.setStatus('current')
tlpEnvInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvInputContactName.setStatus('current')
tlpEnvInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvInputContactNormalState.setStatus('current')
tlpEnvInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvInputContactCurrentState.setStatus('current')
tlpEnvInputContactInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvInputContactInAlarm.setStatus('current')
tlpEnvOutputContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4), )
if mibBuilder.loadTexts: tlpEnvOutputContactTable.setStatus('current')
tlpEnvOutputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpEnvOutputContactIndex"))
if mibBuilder.loadTexts: tlpEnvOutputContactEntry.setStatus('current')
tlpEnvOutputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvOutputContactIndex.setStatus('current')
tlpEnvOutputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvOutputContactName.setStatus('current')
tlpEnvOutputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvOutputContactNormalState.setStatus('current')
tlpEnvOutputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvOutputContactCurrentState.setStatus('current')
tlpEnvOutputContactInAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 3, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpEnvOutputContactInAlarm.setStatus('current')
tlpEnvConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1), )
if mibBuilder.loadTexts: tlpEnvConfigTable.setStatus('current')
tlpEnvConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpEnvConfigEntry.setStatus('current')
tlpEnvTemperatureLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1, 1), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvTemperatureLowLimit.setStatus('current')
tlpEnvTemperatureHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1, 2), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvTemperatureHighLimit.setStatus('current')
tlpEnvHumidityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvHumidityLowLimit.setStatus('current')
tlpEnvHumidityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpEnvHumidityHighLimit.setStatus('current')
tlpAtsIdentNumAts = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumAts.setStatus('current')
tlpAtsIdentTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2), )
if mibBuilder.loadTexts: tlpAtsIdentTable.setStatus('current')
tlpAtsIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsIdentEntry.setStatus('current')
tlpAtsIdentNumInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumInputs.setStatus('current')
tlpAtsIdentNumOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumOutputs.setStatus('current')
tlpAtsIdentNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumPhases.setStatus('current')
tlpAtsIdentNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumOutlets.setStatus('current')
tlpAtsIdentNumOutletGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumOutletGroups.setStatus('current')
tlpAtsIdentNumCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumCircuits.setStatus('current')
tlpAtsIdentNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumBreakers.setStatus('current')
tlpAtsIdentNumHeatsinks = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsIdentNumHeatsinks.setStatus('current')
tlpAtsSupportsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3), )
if mibBuilder.loadTexts: tlpAtsSupportsTable.setStatus('current')
tlpAtsSupportsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsSupportsEntry.setStatus('current')
tlpAtsSupportsEnergywise = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsEnergywise.setStatus('current')
tlpAtsSupportsRampShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsRampShed.setStatus('current')
tlpAtsSupportsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsOutletGroup.setStatus('current')
tlpAtsSupportsOutletCurrentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsOutletCurrentPower.setStatus('current')
tlpAtsSupportsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsSupportsOutletVoltage.setStatus('current')
tlpAtsDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4), )
if mibBuilder.loadTexts: tlpAtsDisplayTable.setStatus('current')
tlpAtsDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsDisplayEntry.setStatus('current')
tlpAtsDisplayScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("schemeReverse", 0), ("schemeNormal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayScheme.setStatus('current')
tlpAtsDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("displayNormal", 0), ("displayReverse", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayOrientation.setStatus('current')
tlpAtsDisplayAutoScroll = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("scrollDisabled", 0), ("scrollEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayAutoScroll.setStatus('current')
tlpAtsDisplayIntensity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4)).clone(namedValues=NamedValues(("intensity25", 1), ("intensity50", 2), ("intensity75", 3), ("intensity100", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayIntensity.setStatus('current')
tlpAtsDisplayUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("normal", 0), ("metric", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDisplayUnits.setStatus('current')
tlpAtsDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1), )
if mibBuilder.loadTexts: tlpAtsDeviceTable.setStatus('current')
tlpAtsDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsDeviceEntry.setStatus('current')
tlpAtsDeviceMainLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceMainLoadState.setStatus('current')
tlpAtsDeviceMainLoadControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceMainLoadControllable.setStatus('current')
tlpAtsDeviceMainLoadCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDeviceMainLoadCommand.setStatus('current')
tlpAtsDevicePowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsDevicePowerOnDelay.setStatus('current')
tlpAtsDeviceTotalInputPowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 5), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceTotalInputPowerRating.setStatus('current')
tlpAtsDeviceTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 6), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceTemperatureC.setStatus('current')
tlpAtsDeviceTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 7), Integer32()).setUnits('degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceTemperatureF.setStatus('current')
tlpAtsDevicePhaseImbalance = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDevicePhaseImbalance.setStatus('current')
tlpAtsDeviceOutputPowerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceOutputPowerTotal.setStatus('current')
tlpAtsDeviceAggregatePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 10), Unsigned32()).setUnits('0.1 Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceAggregatePowerFactor.setStatus('current')
tlpAtsDeviceOutputCurrentPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("none", 0), ("tenths", 1), ("hundredths", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceOutputCurrentPrecision.setStatus('current')
tlpAtsDeviceGeneralFault = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsDeviceGeneralFault.setStatus('current')
tlpAtsInputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1), )
if mibBuilder.loadTexts: tlpAtsInputTable.setStatus('current')
tlpAtsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsInputEntry.setStatus('current')
tlpAtsInputNominalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputNominalVoltage.setStatus('current')
tlpAtsInputNominalVoltagePhaseToPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 2), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputNominalVoltagePhaseToPhase.setStatus('current')
tlpAtsInputNominalVoltagePhaseToNeutral = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 3), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputNominalVoltagePhaseToNeutral.setStatus('current')
tlpAtsInputBadTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputBadTransferVoltage.setStatus('current')
tlpAtsInputBadTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 5), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputBadTransferVoltageLowerBound.setStatus('current')
tlpAtsInputBadTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 6), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputBadTransferVoltageUpperBound.setStatus('current')
tlpAtsInputHighTransferVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 7), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputHighTransferVoltage.setStatus('current')
tlpAtsInputHighTransferVoltageLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 8), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputHighTransferVoltageLowerBound.setStatus('current')
tlpAtsInputHighTransferVoltageUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 9), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputHighTransferVoltageUpperBound.setStatus('current')
tlpAtsInputFairVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 10), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputFairVoltageThreshold.setStatus('current')
tlpAtsInputBadVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 11), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputBadVoltageThreshold.setStatus('current')
tlpAtsInputSourceAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("none", 0), ("inputSourceA", 1), ("inputSourceB", 2), ("inputSourceAB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputSourceAvailability.setStatus('current')
tlpAtsInputSourceInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("inputSourceA", 0), ("inputSourceB", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputSourceInUse.setStatus('current')
tlpAtsInputSourceTransitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputSourceTransitionCount.setStatus('current')
tlpAtsInputCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 1, 1, 15), Unsigned32()).setUnits('Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputCurrentLimit.setStatus('current')
tlpAtsInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2), )
if mibBuilder.loadTexts: tlpAtsInputPhaseTable.setStatus('current')
tlpAtsInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsInputLineIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsInputPhaseIndex"))
if mibBuilder.loadTexts: tlpAtsInputPhaseEntry.setStatus('current')
tlpAtsInputLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputLineIndex.setStatus('current')
tlpAtsInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseIndex.setStatus('current')
tlpAtsInputPhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseType.setStatus('current')
tlpAtsInputPhaseFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 4), Unsigned32()).setUnits('0.1 Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseFrequency.setStatus('current')
tlpAtsInputPhaseVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 5), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseVoltage.setStatus('current')
tlpAtsInputPhaseVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 6), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsInputPhaseVoltageMin.setStatus('current')
tlpAtsInputPhaseVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 7), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsInputPhaseVoltageMax.setStatus('current')
tlpAtsInputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 1, 2, 1, 8), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsInputPhaseCurrent.setStatus('current')
tlpAtsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1), )
if mibBuilder.loadTexts: tlpAtsOutputTable.setStatus('current')
tlpAtsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsOutputIndex"))
if mibBuilder.loadTexts: tlpAtsOutputEntry.setStatus('current')
tlpAtsOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputIndex.setStatus('current')
tlpAtsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputPhase.setStatus('current')
tlpAtsOutputPhaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputPhaseType.setStatus('current')
tlpAtsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 4), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputVoltage.setStatus('current')
tlpAtsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 5), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputCurrent.setStatus('current')
tlpAtsOutputCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 6), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputCurrentMin.setStatus('current')
tlpAtsOutputCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 7), Unsigned32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputCurrentMax.setStatus('current')
tlpAtsOutputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 8), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputActivePower.setStatus('current')
tlpAtsOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 9), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputPowerFactor.setStatus('current')
tlpAtsOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("none", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutputSource.setStatus('current')
tlpAtsOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1), )
if mibBuilder.loadTexts: tlpAtsOutletTable.setStatus('current')
tlpAtsOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsOutletIndex"))
if mibBuilder.loadTexts: tlpAtsOutletEntry.setStatus('current')
tlpAtsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletIndex.setStatus('current')
tlpAtsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletName.setStatus('current')
tlpAtsOutletDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletDescription.setStatus('current')
tlpAtsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletState.setStatus('current')
tlpAtsOutletControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletControllable.setStatus('current')
tlpAtsOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletCommand.setStatus('current')
tlpAtsOutletVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 7), Unsigned32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletVoltage.setStatus('current')
tlpAtsOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 8), Unsigned32()).setUnits('0.01 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletCurrent.setStatus('current')
tlpAtsOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletPower.setStatus('current')
tlpAtsOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("remainOff", 0), ("turnOnAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletRampAction.setStatus('current')
tlpAtsOutletRampDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 11), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletRampDelay.setStatus('current')
tlpAtsOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("remainOn", 0), ("turnOffAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletShedAction.setStatus('current')
tlpAtsOutletShedDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 13), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletShedDelay.setStatus('current')
tlpAtsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroup.setStatus('current')
tlpAtsOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletBank.setStatus('current')
tlpAtsOutletCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletCircuit.setStatus('current')
tlpAtsOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("unknown", 0), ("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletPhase.setStatus('current')
tlpAtsOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2), )
if mibBuilder.loadTexts: tlpAtsOutletGroupTable.setStatus('current')
tlpAtsOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsOutletGroupIndex"))
if mibBuilder.loadTexts: tlpAtsOutletGroupEntry.setStatus('current')
tlpAtsOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletGroupIndex.setStatus('current')
tlpAtsOutletGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroupRowStatus.setStatus('current')
tlpAtsOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroupName.setStatus('current')
tlpAtsOutletGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroupDescription.setStatus('current')
tlpAtsOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3)).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsOutletGroupState.setStatus('current')
tlpAtsOutletGroupCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsOutletGroupCommand.setStatus('current')
tlpAtsCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1), )
if mibBuilder.loadTexts: tlpAtsCircuitTable.setStatus('current')
tlpAtsCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsCircuitIndex"))
if mibBuilder.loadTexts: tlpAtsCircuitEntry.setStatus('current')
tlpAtsCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitIndex.setStatus('current')
tlpAtsCircuitPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("unknown", 0), ("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitPhase.setStatus('current')
tlpAtsCircuitInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 3), Integer32()).setUnits('0.1 Volt DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitInputVoltage.setStatus('current')
tlpAtsCircuitTotalCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 4), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitTotalCurrent.setStatus('current')
tlpAtsCircuitCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 5), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitCurrentLimit.setStatus('current')
tlpAtsCircuitCurrentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 6), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitCurrentMin.setStatus('current')
tlpAtsCircuitCurrentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 7), Integer32()).setUnits('0.01 Amp DC').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitCurrentMax.setStatus('current')
tlpAtsCircuitTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 8), Integer32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitTotalPower.setStatus('current')
tlpAtsCircuitPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitPowerFactor.setStatus('current')
tlpAtsCircuitUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 4, 1, 1, 10), Unsigned32()).setUnits('0.01 %').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsCircuitUtilization.setStatus('current')
tlpAtsBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5, 1), )
if mibBuilder.loadTexts: tlpAtsBreakerTable.setStatus('current')
tlpAtsBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsBreakerIndex"))
if mibBuilder.loadTexts: tlpAtsBreakerEntry.setStatus('current')
tlpAtsBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsBreakerIndex.setStatus('current')
tlpAtsBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2)).clone(namedValues=NamedValues(("open", 0), ("closed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsBreakerStatus.setStatus('current')
tlpAtsHeatsinkTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1), )
if mibBuilder.loadTexts: tlpAtsHeatsinkTable.setStatus('current')
tlpAtsHeatsinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAtsHeatsinkIndex"))
if mibBuilder.loadTexts: tlpAtsHeatsinkEntry.setStatus('current')
tlpAtsHeatsinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsHeatsinkIndex.setStatus('current')
tlpAtsHeatsinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("notAvailable", 0), ("available", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsHeatsinkStatus.setStatus('current')
tlpAtsHeatsinkTemperatureC = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1, 3), Integer32()).setUnits('0.1 degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsHeatsinkTemperatureC.setStatus('current')
tlpAtsHeatsinkTemperatureF = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 3, 6, 1, 1, 4), Integer32()).setUnits('0.1 degrees Farenheit').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAtsHeatsinkTemperatureF.setStatus('current')
tlpAtsControlTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1), )
if mibBuilder.loadTexts: tlpAtsControlTable.setStatus('current')
tlpAtsControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsControlEntry.setStatus('current')
tlpAtsControlRamp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlRamp.setStatus('current')
tlpAtsControlShed = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlShed.setStatus('current')
tlpAtsControlAtsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlAtsOn.setStatus('current')
tlpAtsControlAtsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlAtsOff.setStatus('current')
tlpAtsControlAtsReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlAtsReboot.setStatus('current')
tlpAtsControlResetGeneralFault = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsControlResetGeneralFault.setStatus('current')
tlpAtsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1), )
if mibBuilder.loadTexts: tlpAtsConfigTable.setStatus('current')
tlpAtsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsConfigEntry.setStatus('current')
tlpAtsConfigInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigInputVoltage.setStatus('current')
tlpAtsConfigSourceSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("inputSourceA", 1), ("inputSourceB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceSelect.setStatus('current')
tlpAtsConfigSource1ReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource1ReturnTime.setStatus('current')
tlpAtsConfigSource2ReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource2ReturnTime.setStatus('current')
tlpAtsConfigAutoRampOnTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigAutoRampOnTransition.setStatus('current')
tlpAtsConfigAutoShedOnTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1)).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigAutoShedOnTransition.setStatus('current')
tlpAtsConfigVoltageRangeTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2), )
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeTable.setStatus('current')
tlpAtsConfigVoltageRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeEntry.setStatus('current')
tlpAtsConfigHighVoltageTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 1), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigHighVoltageTransfer.setStatus('current')
tlpAtsConfigHighVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 2), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigHighVoltageReset.setStatus('current')
tlpAtsConfigSource1TransferReset = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 3), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource1TransferReset.setStatus('current')
tlpAtsConfigSource1BrownoutSet = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource1BrownoutSet.setStatus('current')
tlpAtsConfigSource1TransferSet = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 5), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource1TransferSet.setStatus('current')
tlpAtsConfigSource2TransferReset = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 6), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource2TransferReset.setStatus('current')
tlpAtsConfigSource2BrownoutSet = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 7), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource2BrownoutSet.setStatus('current')
tlpAtsConfigSource2TransferSet = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 8), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSource2TransferSet.setStatus('current')
tlpAtsConfigLowVoltageReset = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 9), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigLowVoltageReset.setStatus('current')
tlpAtsConfigLowVoltageTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 2, 1, 10), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigLowVoltageTransfer.setStatus('current')
tlpAtsConfigVoltageRangeLimitsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3), )
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeLimitsTable.setStatus('current')
tlpAtsConfigVoltageRangeLimitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsConfigVoltageRangeLimitsEntry.setStatus('current')
tlpAtsConfigSourceBrownoutSetMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1, 1), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceBrownoutSetMinimum.setStatus('current')
tlpAtsConfigSourceBrownoutSetMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1, 2), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceBrownoutSetMaximum.setStatus('current')
tlpAtsConfigSourceTransferSetMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1, 3), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceTransferSetMinimum.setStatus('current')
tlpAtsConfigSourceTransferSetMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 3, 1, 4), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigSourceTransferSetMaximum.setStatus('current')
tlpAtsConfigThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4), )
if mibBuilder.loadTexts: tlpAtsConfigThresholdTable.setStatus('current')
tlpAtsConfigThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"))
if mibBuilder.loadTexts: tlpAtsConfigThresholdEntry.setStatus('current')
tlpAtsConfigOverCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1, 1), Unsigned32()).setUnits('0.1 Amps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigOverCurrentThreshold.setStatus('current')
tlpAtsConfigOverTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1, 2), Unsigned32()).setUnits('0.1 Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigOverTemperatureThreshold.setStatus('current')
tlpAtsConfigOverVoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1, 3), Unsigned32()).setUnits('0.1 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigOverVoltageThreshold.setStatus('current')
tlpAtsConfigOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 4, 5, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAtsConfigOverLoadThreshold.setStatus('current')
tlpCoolingIdentNumCooling = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpCoolingIdentNumCooling.setStatus('current')
tlpKvmIdentNumKvm = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpKvmIdentNumKvm.setStatus('current')
tlpRackTrackIdentNumRackTrack = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpRackTrackIdentNumRackTrack.setStatus('current')
tlpSwitchIdentNumSwitch = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpSwitchIdentNumSwitch.setStatus('current')
tlpAgentType = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8)).clone(namedValues=NamedValues(("unknown", 0), ("pal", 1), ("pansa", 2), ("delta", 3), ("sinetica", 4), ("netos6", 5), ("netos7", 6), ("panms", 7), ("nmc5", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentType.setStatus('current')
tlpAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentVersion.setStatus('current')
tlpAgentDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentDriverVersion.setStatus('current')
tlpAgentMAC = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentMAC.setStatus('current')
tlpAgentSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentSerialNum.setStatus('current')
tlpAgentUuid = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentUuid.setStatus('current')
tlpAgentAttributesSupports = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1))
tlpAgentAttributesSupportsHTTP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsHTTP.setStatus('current')
tlpAgentAttributesSupportsHTTPS = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsHTTPS.setStatus('current')
tlpAgentAttributesSupportsFTP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsFTP.setStatus('current')
tlpAgentAttributesSupportsTelnetMenu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsTelnetMenu.setStatus('current')
tlpAgentAttributesSupportsTelnetCLI = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsTelnetCLI.setStatus('current')
tlpAgentAttributesSupportsSSHMenu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSSHMenu.setStatus('current')
tlpAgentAttributesSupportsSSHCLI = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSSHCLI.setStatus('current')
tlpAgentAttributesSupportsSNMP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSNMP.setStatus('current')
tlpAgentAttributesSupportsSNMPTrap = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSupportsSNMPTrap.setStatus('current')
tlpAgentAttributesAutostart = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2))
tlpAgentAttributesAutostartHTTP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartHTTP.setStatus('current')
tlpAgentAttributesAutostartHTTPS = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartHTTPS.setStatus('current')
tlpAgentAttributesAutostartFTP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartFTP.setStatus('current')
tlpAgentAttributesAutostartTelnetMenu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartTelnetMenu.setStatus('current')
tlpAgentAttributesAutostartTelnetCLI = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartTelnetCLI.setStatus('current')
tlpAgentAttributesAutostartSSHMenu = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartSSHMenu.setStatus('current')
tlpAgentAttributesAutostartSSHCLI = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartSSHCLI.setStatus('current')
tlpAgentAttributesAutostartSNMP = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 2, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesAutostartSNMP.setStatus('current')
tlpAgentAttributesSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 3))
tlpAgentAttributesSNMPv1Enabled = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 3, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPv1Enabled.setStatus('current')
tlpAgentAttributesSNMPv2cEnabled = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 3, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPv2cEnabled.setStatus('current')
tlpAgentAttributesSNMPv3Enabled = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 3, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPv3Enabled.setStatus('current')
tlpAgentAttributesPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4))
tlpAgentAttributesHTTPPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesHTTPPort.setStatus('current')
tlpAgentAttributesHTTPSPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesHTTPSPort.setStatus('current')
tlpAgentAttributesFTPPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesFTPPort.setStatus('current')
tlpAgentAttributesTelnetMenuPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesTelnetMenuPort.setStatus('current')
tlpAgentAttributesTelnetCLIPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesTelnetCLIPort.setStatus('current')
tlpAgentAttributesSSHMenuPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSSHMenuPort.setStatus('current')
tlpAgentAttributesSSHCLIPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSSHCLIPort.setStatus('current')
tlpAgentAttributesSNMPPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPPort.setStatus('current')
tlpAgentAttributesSNMPTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1, 2, 4, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentAttributesSNMPTrapPort.setStatus('current')
tlpAgentConfigRemoteRegistration = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentConfigRemoteRegistration.setStatus('current')
tlpAgentConfigCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentConfigCurrentTime.setStatus('current')
tlpAgentNumEmailContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentNumEmailContacts.setStatus('current')
tlpAgentEmailContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2), )
if mibBuilder.loadTexts: tlpAgentEmailContactTable.setStatus('current')
tlpAgentEmailContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpAgentEmailContactIndex"))
if mibBuilder.loadTexts: tlpAgentEmailContactEntry.setStatus('current')
tlpAgentEmailContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentEmailContactIndex.setStatus('current')
tlpAgentEmailContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentEmailContactRowStatus.setStatus('current')
tlpAgentEmailContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentEmailContactName.setStatus('current')
tlpAgentEmailContactAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentEmailContactAddress.setStatus('current')
tlpAgentNumSnmpContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentNumSnmpContacts.setStatus('current')
tlpAgentSnmpContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2), )
if mibBuilder.loadTexts: tlpAgentSnmpContactTable.setStatus('current')
tlpAgentSnmpContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpAgentSnmpContactIndex"))
if mibBuilder.loadTexts: tlpAgentSnmpContactEntry.setStatus('current')
tlpAgentSnmpContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAgentSnmpContactIndex.setStatus('current')
tlpAgentSnmpContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactRowStatus.setStatus('current')
tlpAgentSnmpContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactName.setStatus('current')
tlpAgentSnmpContactIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactIpAddress.setStatus('current')
tlpAgentSnmpContactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactPort.setStatus('current')
tlpAgentSnmpContactSnmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2), ("snmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactSnmpVersion.setStatus('current')
tlpAgentSnmpContactSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactSecurityName.setStatus('current')
tlpAgentSnmpContactPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactPrivPassword.setStatus('current')
tlpAgentSnmpContactAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 2, 3, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAgentSnmpContactAuthPassword.setStatus('current')
tlpAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmsPresent.setStatus('current')
tlpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 3, 2), )
if mibBuilder.loadTexts: tlpAlarmTable.setStatus('current')
tlpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpAlarmId"))
if mibBuilder.loadTexts: tlpAlarmEntry.setStatus('current')
tlpAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmId.setStatus('current')
tlpAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmDescr.setStatus('current')
tlpAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmTime.setStatus('current')
tlpAlarmTableRef = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmTableRef.setStatus('current')
tlpAlarmTableRowRef = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmTableRowRef.setStatus('current')
tlpAlarmDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmDetail.setStatus('current')
tlpAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6)).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("info", 3), ("status", 4), ("offline", 5), ("custom", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmType.setStatus('current')
tlpAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmState.setStatus('current')
tlpAlarmAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2)).clone(namedValues=NamedValues(("notAcknowledged", 1), ("acknowledged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAlarmAcknowledged.setStatus('current')
tlpAlarmCommunicationsLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 1))
if mibBuilder.loadTexts: tlpAlarmCommunicationsLost.setStatus('current')
tlpAlarmUserDefined = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2))
tlpAlarmUserDefined01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 1))
if mibBuilder.loadTexts: tlpAlarmUserDefined01.setStatus('current')
tlpAlarmUserDefined02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 2))
if mibBuilder.loadTexts: tlpAlarmUserDefined02.setStatus('current')
tlpAlarmUserDefined03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 3))
if mibBuilder.loadTexts: tlpAlarmUserDefined03.setStatus('current')
tlpAlarmUserDefined04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 4))
if mibBuilder.loadTexts: tlpAlarmUserDefined04.setStatus('current')
tlpAlarmUserDefined05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 5))
if mibBuilder.loadTexts: tlpAlarmUserDefined05.setStatus('current')
tlpAlarmUserDefined06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 6))
if mibBuilder.loadTexts: tlpAlarmUserDefined06.setStatus('current')
tlpAlarmUserDefined07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 7))
if mibBuilder.loadTexts: tlpAlarmUserDefined07.setStatus('current')
tlpAlarmUserDefined08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 8))
if mibBuilder.loadTexts: tlpAlarmUserDefined08.setStatus('current')
tlpAlarmUserDefined09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 2, 2, 9))
if mibBuilder.loadTexts: tlpAlarmUserDefined09.setStatus('current')
tlpUpsAlarmBatteryBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 1))
if mibBuilder.loadTexts: tlpUpsAlarmBatteryBad.setStatus('current')
tlpUpsAlarmOnBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 2))
if mibBuilder.loadTexts: tlpUpsAlarmOnBattery.setStatus('current')
tlpUpsAlarmLowBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 3))
if mibBuilder.loadTexts: tlpUpsAlarmLowBattery.setStatus('current')
tlpUpsAlarmDepletedBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 4))
if mibBuilder.loadTexts: tlpUpsAlarmDepletedBattery.setStatus('current')
tlpUpsAlarmTempBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 5))
if mibBuilder.loadTexts: tlpUpsAlarmTempBad.setStatus('current')
tlpUpsAlarmInputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 6))
if mibBuilder.loadTexts: tlpUpsAlarmInputBad.setStatus('current')
tlpUpsAlarmOutputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 7))
if mibBuilder.loadTexts: tlpUpsAlarmOutputBad.setStatus('current')
tlpUpsAlarmOutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 8))
if mibBuilder.loadTexts: tlpUpsAlarmOutputOverload.setStatus('current')
tlpUpsAlarmOnBypass = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 9))
if mibBuilder.loadTexts: tlpUpsAlarmOnBypass.setStatus('current')
tlpUpsAlarmBypassBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 10))
if mibBuilder.loadTexts: tlpUpsAlarmBypassBad.setStatus('current')
tlpUpsAlarmOutputOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 11))
if mibBuilder.loadTexts: tlpUpsAlarmOutputOffAsRequested.setStatus('current')
tlpUpsAlarmUpsOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 12))
if mibBuilder.loadTexts: tlpUpsAlarmUpsOffAsRequested.setStatus('current')
tlpUpsAlarmChargerFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 13))
if mibBuilder.loadTexts: tlpUpsAlarmChargerFailed.setStatus('current')
tlpUpsAlarmUpsOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 14))
if mibBuilder.loadTexts: tlpUpsAlarmUpsOutputOff.setStatus('current')
tlpUpsAlarmUpsSystemOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 15))
if mibBuilder.loadTexts: tlpUpsAlarmUpsSystemOff.setStatus('current')
tlpUpsAlarmFanFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 16))
if mibBuilder.loadTexts: tlpUpsAlarmFanFailure.setStatus('current')
tlpUpsAlarmFuseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 17))
if mibBuilder.loadTexts: tlpUpsAlarmFuseFailure.setStatus('current')
tlpUpsAlarmGeneralFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 18))
if mibBuilder.loadTexts: tlpUpsAlarmGeneralFault.setStatus('current')
tlpUpsAlarmDiagnosticTestFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 19))
if mibBuilder.loadTexts: tlpUpsAlarmDiagnosticTestFailed.setStatus('current')
tlpUpsAlarmAwaitingPower = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 20))
if mibBuilder.loadTexts: tlpUpsAlarmAwaitingPower.setStatus('current')
tlpUpsAlarmShutdownPending = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 21))
if mibBuilder.loadTexts: tlpUpsAlarmShutdownPending.setStatus('current')
tlpUpsAlarmShutdownImminent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 22))
if mibBuilder.loadTexts: tlpUpsAlarmShutdownImminent.setStatus('current')
tlpUpsAlarmLoadLevelAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23))
tlpUpsAlarmLoadLevelAboveThresholdTotal = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23, 1))
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdTotal.setStatus('current')
tlpUpsAlarmLoadLevelAboveThresholdPhase1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23, 2))
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdPhase1.setStatus('current')
tlpUpsAlarmLoadLevelAboveThresholdPhase2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23, 3))
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdPhase2.setStatus('current')
tlpUpsAlarmLoadLevelAboveThresholdPhase3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 23, 4))
if mibBuilder.loadTexts: tlpUpsAlarmLoadLevelAboveThresholdPhase3.setStatus('current')
tlpUpsAlarmOutputCurrentChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 24))
if mibBuilder.loadTexts: tlpUpsAlarmOutputCurrentChanged.setStatus('current')
tlpUpsAlarmBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 25))
if mibBuilder.loadTexts: tlpUpsAlarmBatteryAgeAboveThreshold.setStatus('current')
tlpUpsAlarmLoadOff = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26))
tlpUpsAlarmLoadOff01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 1))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff01.setStatus('current')
tlpUpsAlarmLoadOff02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 2))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff02.setStatus('current')
tlpUpsAlarmLoadOff03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 3))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff03.setStatus('current')
tlpUpsAlarmLoadOff04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 4))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff04.setStatus('current')
tlpUpsAlarmLoadOff05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 5))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff05.setStatus('current')
tlpUpsAlarmLoadOff06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 6))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff06.setStatus('current')
tlpUpsAlarmLoadOff07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 7))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff07.setStatus('current')
tlpUpsAlarmLoadOff08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 8))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff08.setStatus('current')
tlpUpsAlarmLoadOff09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 9))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff09.setStatus('current')
tlpUpsAlarmLoadOff10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 10))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff10.setStatus('current')
tlpUpsAlarmLoadOff11 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 11))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff11.setStatus('current')
tlpUpsAlarmLoadOff12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 12))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff12.setStatus('current')
tlpUpsAlarmLoadOff13 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 13))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff13.setStatus('current')
tlpUpsAlarmLoadOff14 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 14))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff14.setStatus('current')
tlpUpsAlarmLoadOff15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 15))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff15.setStatus('current')
tlpUpsAlarmLoadOff16 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 16))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff16.setStatus('current')
tlpUpsAlarmLoadOff17 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 17))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff17.setStatus('current')
tlpUpsAlarmLoadOff18 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 18))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff18.setStatus('current')
tlpUpsAlarmLoadOff19 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 19))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff19.setStatus('current')
tlpUpsAlarmLoadOff20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 20))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff20.setStatus('current')
tlpUpsAlarmLoadOff21 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 21))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff21.setStatus('current')
tlpUpsAlarmLoadOff22 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 22))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff22.setStatus('current')
tlpUpsAlarmLoadOff23 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 23))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff23.setStatus('current')
tlpUpsAlarmLoadOff24 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 24))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff24.setStatus('current')
tlpUpsAlarmLoadOff25 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 25))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff25.setStatus('current')
tlpUpsAlarmLoadOff26 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 26))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff26.setStatus('current')
tlpUpsAlarmLoadOff27 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 27))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff27.setStatus('current')
tlpUpsAlarmLoadOff28 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 28))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff28.setStatus('current')
tlpUpsAlarmLoadOff29 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 29))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff29.setStatus('current')
tlpUpsAlarmLoadOff30 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 30))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff30.setStatus('current')
tlpUpsAlarmLoadOff31 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 31))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff31.setStatus('current')
tlpUpsAlarmLoadOff32 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 32))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff32.setStatus('current')
tlpUpsAlarmLoadOff33 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 33))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff33.setStatus('current')
tlpUpsAlarmLoadOff34 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 34))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff34.setStatus('current')
tlpUpsAlarmLoadOff35 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 35))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff35.setStatus('current')
tlpUpsAlarmLoadOff36 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 36))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff36.setStatus('current')
tlpUpsAlarmLoadOff37 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 37))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff37.setStatus('current')
tlpUpsAlarmLoadOff38 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 38))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff38.setStatus('current')
tlpUpsAlarmLoadOff39 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 39))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff39.setStatus('current')
tlpUpsAlarmLoadOff40 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 26, 40))
if mibBuilder.loadTexts: tlpUpsAlarmLoadOff40.setStatus('current')
tlpUpsAlarmCurrentAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 27))
tlpUpsAlarmCurrentAboveThreshold1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 27, 1))
if mibBuilder.loadTexts: tlpUpsAlarmCurrentAboveThreshold1.setStatus('current')
tlpUpsAlarmCurrentAboveThreshold2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 27, 2))
if mibBuilder.loadTexts: tlpUpsAlarmCurrentAboveThreshold2.setStatus('current')
tlpUpsAlarmCurrentAboveThreshold3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 27, 3))
if mibBuilder.loadTexts: tlpUpsAlarmCurrentAboveThreshold3.setStatus('current')
tlpUpsAlarmRuntimeBelowWarningLevel = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 28))
if mibBuilder.loadTexts: tlpUpsAlarmRuntimeBelowWarningLevel.setStatus('current')
tlpUpsAlarmBusStartVoltageLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 29))
if mibBuilder.loadTexts: tlpUpsAlarmBusStartVoltageLow.setStatus('current')
tlpUpsAlarmBusOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 30))
if mibBuilder.loadTexts: tlpUpsAlarmBusOverVoltage.setStatus('current')
tlpUpsAlarmBusUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 31))
if mibBuilder.loadTexts: tlpUpsAlarmBusUnderVoltage.setStatus('current')
tlpUpsAlarmBusVoltageUnbalanced = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 32))
if mibBuilder.loadTexts: tlpUpsAlarmBusVoltageUnbalanced.setStatus('current')
tlpUpsAlarmInverterSoftStartBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 33))
if mibBuilder.loadTexts: tlpUpsAlarmInverterSoftStartBad.setStatus('current')
tlpUpsAlarmInverterOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 34))
if mibBuilder.loadTexts: tlpUpsAlarmInverterOverVoltage.setStatus('current')
tlpUpsAlarmInverterUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 35))
if mibBuilder.loadTexts: tlpUpsAlarmInverterUnderVoltage.setStatus('current')
tlpUpsAlarmInverterCircuitBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 36))
if mibBuilder.loadTexts: tlpUpsAlarmInverterCircuitBad.setStatus('current')
tlpUpsAlarmBatteryOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 37))
if mibBuilder.loadTexts: tlpUpsAlarmBatteryOverVoltage.setStatus('current')
tlpUpsAlarmBatteryUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 38))
if mibBuilder.loadTexts: tlpUpsAlarmBatteryUnderVoltage.setStatus('current')
tlpUpsAlarmSiteWiringFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 39))
if mibBuilder.loadTexts: tlpUpsAlarmSiteWiringFault.setStatus('current')
tlpUpsAlarmOverTemperatureProtection = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 40))
if mibBuilder.loadTexts: tlpUpsAlarmOverTemperatureProtection.setStatus('current')
tlpUpsAlarmOverCharged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 41))
if mibBuilder.loadTexts: tlpUpsAlarmOverCharged.setStatus('current')
tlpUpsAlarmEPOActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 42))
if mibBuilder.loadTexts: tlpUpsAlarmEPOActive.setStatus('current')
tlpUpsAlarmBypassFrequencyBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 43))
if mibBuilder.loadTexts: tlpUpsAlarmBypassFrequencyBad.setStatus('current')
tlpUpsAlarmExternalSmartBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 44))
if mibBuilder.loadTexts: tlpUpsAlarmExternalSmartBatteryAgeAboveThreshold.setStatus('current')
tlpUpsAlarmExternalNonSmartBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 45))
if mibBuilder.loadTexts: tlpUpsAlarmExternalNonSmartBatteryAgeAboveThreshold.setStatus('current')
tlpUpsAlarmSmartBatteryCommLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 46))
if mibBuilder.loadTexts: tlpUpsAlarmSmartBatteryCommLost.setStatus('current')
tlpUpsAlarmLoadsNotAllOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 3, 47))
if mibBuilder.loadTexts: tlpUpsAlarmLoadsNotAllOn.setStatus('current')
tlpPduAlarmLoadLevelAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 1))
if mibBuilder.loadTexts: tlpPduAlarmLoadLevelAboveThreshold.setStatus('current')
tlpPduAlarmInputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 2))
if mibBuilder.loadTexts: tlpPduAlarmInputBad.setStatus('current')
tlpPduAlarmOutputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 3))
if mibBuilder.loadTexts: tlpPduAlarmOutputBad.setStatus('current')
tlpPduAlarmOutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 4))
if mibBuilder.loadTexts: tlpPduAlarmOutputOverload.setStatus('current')
tlpPduAlarmOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 5))
if mibBuilder.loadTexts: tlpPduAlarmOutputOff.setStatus('current')
tlpPduAlarmLoadOff = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6))
tlpPduAlarmLoadOff01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 1))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff01.setStatus('current')
tlpPduAlarmLoadOff02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 2))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff02.setStatus('current')
tlpPduAlarmLoadOff03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 3))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff03.setStatus('current')
tlpPduAlarmLoadOff04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 4))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff04.setStatus('current')
tlpPduAlarmLoadOff05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 5))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff05.setStatus('current')
tlpPduAlarmLoadOff06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 6))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff06.setStatus('current')
tlpPduAlarmLoadOff07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 7))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff07.setStatus('current')
tlpPduAlarmLoadOff08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 8))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff08.setStatus('current')
tlpPduAlarmLoadOff09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 9))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff09.setStatus('current')
tlpPduAlarmLoadOff10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 10))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff10.setStatus('current')
tlpPduAlarmLoadOff11 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 11))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff11.setStatus('current')
tlpPduAlarmLoadOff12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 12))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff12.setStatus('current')
tlpPduAlarmLoadOff13 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 13))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff13.setStatus('current')
tlpPduAlarmLoadOff14 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 14))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff14.setStatus('current')
tlpPduAlarmLoadOff15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 15))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff15.setStatus('current')
tlpPduAlarmLoadOff16 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 16))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff16.setStatus('current')
tlpPduAlarmLoadOff17 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 17))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff17.setStatus('current')
tlpPduAlarmLoadOff18 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 18))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff18.setStatus('current')
tlpPduAlarmLoadOff19 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 19))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff19.setStatus('current')
tlpPduAlarmLoadOff20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 20))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff20.setStatus('current')
tlpPduAlarmLoadOff21 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 21))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff21.setStatus('current')
tlpPduAlarmLoadOff22 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 22))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff22.setStatus('current')
tlpPduAlarmLoadOff23 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 23))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff23.setStatus('current')
tlpPduAlarmLoadOff24 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 24))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff24.setStatus('current')
tlpPduAlarmLoadOff25 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 25))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff25.setStatus('current')
tlpPduAlarmLoadOff26 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 26))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff26.setStatus('current')
tlpPduAlarmLoadOff27 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 27))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff27.setStatus('current')
tlpPduAlarmLoadOff28 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 28))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff28.setStatus('current')
tlpPduAlarmLoadOff29 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 29))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff29.setStatus('current')
tlpPduAlarmLoadOff30 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 30))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff30.setStatus('current')
tlpPduAlarmLoadOff31 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 31))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff31.setStatus('current')
tlpPduAlarmLoadOff32 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 32))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff32.setStatus('current')
tlpPduAlarmLoadOff33 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 33))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff33.setStatus('current')
tlpPduAlarmLoadOff34 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 34))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff34.setStatus('current')
tlpPduAlarmLoadOff35 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 35))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff35.setStatus('current')
tlpPduAlarmLoadOff36 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 36))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff36.setStatus('current')
tlpPduAlarmLoadOff37 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 37))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff37.setStatus('current')
tlpPduAlarmLoadOff38 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 38))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff38.setStatus('current')
tlpPduAlarmLoadOff39 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 39))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff39.setStatus('current')
tlpPduAlarmLoadOff40 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 6, 40))
if mibBuilder.loadTexts: tlpPduAlarmLoadOff40.setStatus('current')
tlpPduAlarmCircuitBreakerOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7))
tlpPduAlarmCircuitBreakerOpen01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 1))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen01.setStatus('current')
tlpPduAlarmCircuitBreakerOpen02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 2))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen02.setStatus('current')
tlpPduAlarmCircuitBreakerOpen03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 3))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen03.setStatus('current')
tlpPduAlarmCircuitBreakerOpen04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 4))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen04.setStatus('current')
tlpPduAlarmCircuitBreakerOpen05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 5))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen05.setStatus('current')
tlpPduAlarmCircuitBreakerOpen06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 7, 6))
if mibBuilder.loadTexts: tlpPduAlarmCircuitBreakerOpen06.setStatus('current')
tlpPduAlarmCurrentAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 8))
tlpPduAlarmCurrentAboveThreshold1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 8, 1))
if mibBuilder.loadTexts: tlpPduAlarmCurrentAboveThreshold1.setStatus('current')
tlpPduAlarmCurrentAboveThreshold2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 8, 2))
if mibBuilder.loadTexts: tlpPduAlarmCurrentAboveThreshold2.setStatus('current')
tlpPduAlarmCurrentAboveThreshold3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 8, 3))
if mibBuilder.loadTexts: tlpPduAlarmCurrentAboveThreshold3.setStatus('current')
tlpPduAlarmLoadsNotAllOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 4, 9))
if mibBuilder.loadTexts: tlpPduAlarmLoadsNotAllOn.setStatus('current')
tlpEnvAlarmTemperatureBeyondLimits = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 1))
if mibBuilder.loadTexts: tlpEnvAlarmTemperatureBeyondLimits.setStatus('current')
tlpEnvAlarmHumidityBeyondLimits = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 2))
if mibBuilder.loadTexts: tlpEnvAlarmHumidityBeyondLimits.setStatus('current')
tlpEnvAlarmInputContact = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3))
tlpEnvAlarmInputContact01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3, 1))
if mibBuilder.loadTexts: tlpEnvAlarmInputContact01.setStatus('current')
tlpEnvAlarmInputContact02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3, 2))
if mibBuilder.loadTexts: tlpEnvAlarmInputContact02.setStatus('current')
tlpEnvAlarmInputContact03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3, 3))
if mibBuilder.loadTexts: tlpEnvAlarmInputContact03.setStatus('current')
tlpEnvAlarmInputContact04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 3, 4))
if mibBuilder.loadTexts: tlpEnvAlarmInputContact04.setStatus('current')
tlpEnvAlarmOutputContact = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4))
tlpEnvAlarmOutputContact01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4, 1))
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact01.setStatus('current')
tlpEnvAlarmOutputContact02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4, 2))
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact02.setStatus('current')
tlpEnvAlarmOutputContact03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4, 3))
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact03.setStatus('current')
tlpEnvAlarmOutputContact04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 5, 4, 4))
if mibBuilder.loadTexts: tlpEnvAlarmOutputContact04.setStatus('current')
tlpAtsAlarmOutage = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 1))
tlpAtsAlarmSource1Outage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 1, 1))
if mibBuilder.loadTexts: tlpAtsAlarmSource1Outage.setStatus('current')
tlpAtsAlarmSource2Outage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 1, 2))
if mibBuilder.loadTexts: tlpAtsAlarmSource2Outage.setStatus('current')
tlpAtsAlarmTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 2))
tlpAtsAlarmSystemTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 2, 1))
if mibBuilder.loadTexts: tlpAtsAlarmSystemTemperature.setStatus('current')
tlpAtsAlarmSource1Temperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 2, 2))
if mibBuilder.loadTexts: tlpAtsAlarmSource1Temperature.setStatus('current')
tlpAtsAlarmSource2Temperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 2, 3))
if mibBuilder.loadTexts: tlpAtsAlarmSource2Temperature.setStatus('current')
tlpAtsAlarmLoadLevelAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 3))
if mibBuilder.loadTexts: tlpAtsAlarmLoadLevelAboveThreshold.setStatus('current')
tlpAtsAlarmInputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 4))
if mibBuilder.loadTexts: tlpAtsAlarmInputBad.setStatus('current')
tlpAtsAlarmOutputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 5))
if mibBuilder.loadTexts: tlpAtsAlarmOutputBad.setStatus('current')
tlpAtsAlarmOutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 6))
if mibBuilder.loadTexts: tlpAtsAlarmOutputOverload.setStatus('current')
tlpAtsAlarmOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 7))
if mibBuilder.loadTexts: tlpAtsAlarmOutputOff.setStatus('current')
tlpAtsAlarmLoadOff = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8))
tlpAtsAlarmLoadOff01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 1))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff01.setStatus('current')
tlpAtsAlarmLoadOff02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 2))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff02.setStatus('current')
tlpAtsAlarmLoadOff03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 3))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff03.setStatus('current')
tlpAtsAlarmLoadOff04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 4))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff04.setStatus('current')
tlpAtsAlarmLoadOff05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 5))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff05.setStatus('current')
tlpAtsAlarmLoadOff06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 6))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff06.setStatus('current')
tlpAtsAlarmLoadOff07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 7))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff07.setStatus('current')
tlpAtsAlarmLoadOff08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 8))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff08.setStatus('current')
tlpAtsAlarmLoadOff09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 9))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff09.setStatus('current')
tlpAtsAlarmLoadOff10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 10))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff10.setStatus('current')
tlpAtsAlarmLoadOff11 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 11))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff11.setStatus('current')
tlpAtsAlarmLoadOff12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 12))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff12.setStatus('current')
tlpAtsAlarmLoadOff13 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 13))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff13.setStatus('current')
tlpAtsAlarmLoadOff14 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 14))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff14.setStatus('current')
tlpAtsAlarmLoadOff15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 15))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff15.setStatus('current')
tlpAtsAlarmLoadOff16 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 16))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff16.setStatus('current')
tlpAtsAlarmLoadOff17 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 17))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff17.setStatus('current')
tlpAtsAlarmLoadOff18 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 18))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff18.setStatus('current')
tlpAtsAlarmLoadOff19 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 19))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff19.setStatus('current')
tlpAtsAlarmLoadOff20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 20))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff20.setStatus('current')
tlpAtsAlarmLoadOff21 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 21))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff21.setStatus('current')
tlpAtsAlarmLoadOff22 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 22))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff22.setStatus('current')
tlpAtsAlarmLoadOff23 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 23))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff23.setStatus('current')
tlpAtsAlarmLoadOff24 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 24))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff24.setStatus('current')
tlpAtsAlarmLoadOff25 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 25))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff25.setStatus('current')
tlpAtsAlarmLoadOff26 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 26))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff26.setStatus('current')
tlpAtsAlarmLoadOff27 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 27))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff27.setStatus('current')
tlpAtsAlarmLoadOff28 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 28))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff28.setStatus('current')
tlpAtsAlarmLoadOff29 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 29))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff29.setStatus('current')
tlpAtsAlarmLoadOff30 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 30))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff30.setStatus('current')
tlpAtsAlarmLoadOff31 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 31))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff31.setStatus('current')
tlpAtsAlarmLoadOff32 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 32))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff32.setStatus('current')
tlpAtsAlarmLoadOff33 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 33))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff33.setStatus('current')
tlpAtsAlarmLoadOff34 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 34))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff34.setStatus('current')
tlpAtsAlarmLoadOff35 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 35))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff35.setStatus('current')
tlpAtsAlarmLoadOff36 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 36))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff36.setStatus('current')
tlpAtsAlarmLoadOff37 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 37))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff37.setStatus('current')
tlpAtsAlarmLoadOff38 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 38))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff38.setStatus('current')
tlpAtsAlarmLoadOff39 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 39))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff39.setStatus('current')
tlpAtsAlarmLoadOff40 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 8, 40))
if mibBuilder.loadTexts: tlpAtsAlarmLoadOff40.setStatus('current')
tlpAtsAlarmCircuitBreakerOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9))
tlpAtsAlarmCircuitBreakerOpen01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 1))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen01.setStatus('current')
tlpAtsAlarmCircuitBreakerOpen02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 2))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen02.setStatus('current')
tlpAtsAlarmCircuitBreakerOpen03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 3))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen03.setStatus('current')
tlpAtsAlarmCircuitBreakerOpen04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 4))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen04.setStatus('current')
tlpAtsAlarmCircuitBreakerOpen05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 5))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen05.setStatus('current')
tlpAtsAlarmCircuitBreakerOpen06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 9, 6))
if mibBuilder.loadTexts: tlpAtsAlarmCircuitBreakerOpen06.setStatus('current')
tlpAtsAlarmCurrentAboveThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10))
tlpAtsAlarmCurrentAboveThresholdA1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 1))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdA1.setStatus('current')
tlpAtsAlarmCurrentAboveThresholdA2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 2))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdA2.setStatus('current')
tlpAtsAlarmCurrentAboveThresholdA3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 3))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdA3.setStatus('current')
tlpAtsAlarmCurrentAboveThresholdB1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 4))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdB1.setStatus('current')
tlpAtsAlarmCurrentAboveThresholdB2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 5))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdB2.setStatus('current')
tlpAtsAlarmCurrentAboveThresholdB3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 10, 6))
if mibBuilder.loadTexts: tlpAtsAlarmCurrentAboveThresholdB3.setStatus('current')
tlpAtsAlarmLoadsNotAllOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 11))
if mibBuilder.loadTexts: tlpAtsAlarmLoadsNotAllOn.setStatus('current')
tlpAtsAlarmGeneralFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 12))
if mibBuilder.loadTexts: tlpAtsAlarmGeneralFault.setStatus('current')
tlpAtsAlarmVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 13))
tlpAtsAlarmOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 13, 1))
if mibBuilder.loadTexts: tlpAtsAlarmOverVoltage.setStatus('current')
tlpAtsAlarmSource1OverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 13, 2))
if mibBuilder.loadTexts: tlpAtsAlarmSource1OverVoltage.setStatus('current')
tlpAtsAlarmSource2OverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 13, 3))
if mibBuilder.loadTexts: tlpAtsAlarmSource2OverVoltage.setStatus('current')
tlpAtsAlarmFrequency = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 14))
tlpAtsAlarmSource1InvalidFrequency = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 14, 1))
if mibBuilder.loadTexts: tlpAtsAlarmSource1InvalidFrequency.setStatus('current')
tlpAtsAlarmSource2InvalidFrequency = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 6, 14, 2))
if mibBuilder.loadTexts: tlpAtsAlarmSource2InvalidFrequency.setStatus('current')
tlpCoolingAlarmSupplyAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 1))
if mibBuilder.loadTexts: tlpCoolingAlarmSupplyAirSensorFault.setStatus('current')
tlpCoolingAlarmReturnAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 2))
if mibBuilder.loadTexts: tlpCoolingAlarmReturnAirSensorFault.setStatus('current')
tlpCoolingAlarmCondenserInletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 3))
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserInletAirSensorFault.setStatus('current')
tlpCoolingAlarmCondenserOutletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 4))
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserOutletAirSensorFault.setStatus('current')
tlpCoolingAlarmSuctionTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 5))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionTemperatureSensorFault.setStatus('current')
tlpCoolingAlarmEvaporatorTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 6))
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorTemperatureSensorFault.setStatus('current')
tlpCoolingAlarmAirFilterClogged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 7))
if mibBuilder.loadTexts: tlpCoolingAlarmAirFilterClogged.setStatus('current')
tlpCoolingAlarmAirFilterRunHoursViolation = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 8))
if mibBuilder.loadTexts: tlpCoolingAlarmAirFilterRunHoursViolation.setStatus('current')
tlpCoolingAlarmSuctionPressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 9))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressureSensorFault.setStatus('current')
tlpCoolingAlarmInverterCommunicationsFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 10))
if mibBuilder.loadTexts: tlpCoolingAlarmInverterCommunicationsFault.setStatus('current')
tlpCoolingAlarmRemoteShutdownViaInputContact = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 11))
if mibBuilder.loadTexts: tlpCoolingAlarmRemoteShutdownViaInputContact.setStatus('current')
tlpCoolingAlarmCondensatePumpFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 12))
if mibBuilder.loadTexts: tlpCoolingAlarmCondensatePumpFault.setStatus('current')
tlpCoolingAlarmLowRefrigerantStartupFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 13))
if mibBuilder.loadTexts: tlpCoolingAlarmLowRefrigerantStartupFault.setStatus('current')
tlpCoolingAlarmCondenserFanFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 14))
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserFanFault.setStatus('current')
tlpCoolingAlarmCondenserFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 15))
if mibBuilder.loadTexts: tlpCoolingAlarmCondenserFailure.setStatus('current')
tlpCoolingAlarmEvaporatorCoolingFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 16))
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorCoolingFailure.setStatus('current')
tlpCoolingAlarmReturnAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 17))
if mibBuilder.loadTexts: tlpCoolingAlarmReturnAirTempHigh.setStatus('current')
tlpCoolingAlarmSupplyAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 18))
if mibBuilder.loadTexts: tlpCoolingAlarmSupplyAirTempHigh.setStatus('current')
tlpCoolingAlarmEvaporatorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 19))
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorFailure.setStatus('current')
tlpCoolingAlarmEvaporatorFreezeUp = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 20))
if mibBuilder.loadTexts: tlpCoolingAlarmEvaporatorFreezeUp.setStatus('current')
tlpCoolingAlarmDischargePressureHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 21))
if mibBuilder.loadTexts: tlpCoolingAlarmDischargePressureHigh.setStatus('current')
tlpCoolingAlarmPressureGaugeFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 22))
if mibBuilder.loadTexts: tlpCoolingAlarmPressureGaugeFailure.setStatus('current')
tlpCoolingAlarmDischargePressurePersistentHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 23))
if mibBuilder.loadTexts: tlpCoolingAlarmDischargePressurePersistentHigh.setStatus('current')
tlpCoolingAlarmSuctionPressureLowStartFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 24))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressureLowStartFailure.setStatus('current')
tlpCoolingAlarmSuctionPressureLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 25))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressureLow.setStatus('current')
tlpCoolingAlarmSuctionPressurePersistentLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 26))
if mibBuilder.loadTexts: tlpCoolingAlarmSuctionPressurePersistentLow.setStatus('current')
tlpCoolingAlarmStartupLinePressureImbalance = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 27))
if mibBuilder.loadTexts: tlpCoolingAlarmStartupLinePressureImbalance.setStatus('current')
tlpCoolingAlarmCompressorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 28))
if mibBuilder.loadTexts: tlpCoolingAlarmCompressorFailure.setStatus('current')
tlpCoolingAlarmCurrentLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 29))
if mibBuilder.loadTexts: tlpCoolingAlarmCurrentLimit.setStatus('current')
tlpCoolingAlarmWaterLeak = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 30))
if mibBuilder.loadTexts: tlpCoolingAlarmWaterLeak.setStatus('current')
tlpCoolingAlarmFanUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 31))
if mibBuilder.loadTexts: tlpCoolingAlarmFanUnderCurrent.setStatus('current')
tlpCoolingAlarmFanOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 32))
if mibBuilder.loadTexts: tlpCoolingAlarmFanOverCurrent.setStatus('current')
tlpCoolingAlarmDischargePressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 33))
if mibBuilder.loadTexts: tlpCoolingAlarmDischargePressureSensorFault.setStatus('current')
tlpCoolingAlarmWaterFull = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 34))
if mibBuilder.loadTexts: tlpCoolingAlarmWaterFull.setStatus('current')
tlpCoolingAlarmAutoCoolingOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 35))
if mibBuilder.loadTexts: tlpCoolingAlarmAutoCoolingOn.setStatus('current')
tlpCoolingAlarmPowerButtonPressed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 36))
if mibBuilder.loadTexts: tlpCoolingAlarmPowerButtonPressed.setStatus('current')
tlpCoolingAlarmDisconnectedFromDevice = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 1, 3, 3, 7, 37))
if mibBuilder.loadTexts: tlpCoolingAlarmDisconnectedFromDevice.setStatus('current')
tlpAlarmControlTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1), )
if mibBuilder.loadTexts: tlpAlarmControlTable.setStatus('current')
tlpAlarmControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-PRODUCTS", "tlpDeviceIndex"), (0, "TRIPPLITE-PRODUCTS", "tlpAlarmControlIndex"))
if mibBuilder.loadTexts: tlpAlarmControlEntry.setStatus('current')
tlpAlarmControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmControlIndex.setStatus('current')
tlpAlarmControlDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmControlDescr.setStatus('current')
tlpAlarmControlDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlpAlarmControlDetail.setStatus('current')
tlpAlarmControlSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3)).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("info", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlpAlarmControlSeverity.setStatus('current')
tlpNotificationsAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1)).setObjects(("TRIPPLITE-PRODUCTS", "tlpAlarmId"), ("TRIPPLITE-PRODUCTS", "tlpAlarmDescr"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTime"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTableRef"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTableRowRef"), ("TRIPPLITE-PRODUCTS", "tlpAlarmDetail"), ("TRIPPLITE-PRODUCTS", "tlpAlarmType"))
if mibBuilder.loadTexts: tlpNotificationsAlarmEntryAdded.setStatus('current')
tlpNotificationsAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 2)).setObjects(("TRIPPLITE-PRODUCTS", "tlpAlarmId"), ("TRIPPLITE-PRODUCTS", "tlpAlarmDescr"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTime"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTableRef"), ("TRIPPLITE-PRODUCTS", "tlpAlarmTableRowRef"), ("TRIPPLITE-PRODUCTS", "tlpAlarmDetail"), ("TRIPPLITE-PRODUCTS", "tlpAlarmType"))
if mibBuilder.loadTexts: tlpNotificationsAlarmEntryRemoved.setStatus('current')
tlpNotifySystemStartup = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 3))
if mibBuilder.loadTexts: tlpNotifySystemStartup.setStatus('current')
tlpNotifySystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 4))
if mibBuilder.loadTexts: tlpNotifySystemShutdown.setStatus('current')
tlpNotifySystemUpdate = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 5))
if mibBuilder.loadTexts: tlpNotifySystemUpdate.setStatus('current')
mibBuilder.exportSymbols("TRIPPLITE-PRODUCTS", tlpCoolingAlarmCondenserFanFault=tlpCoolingAlarmCondenserFanFault, tlpCoolingAlarmAirFilterClogged=tlpCoolingAlarmAirFilterClogged, tlpUpsInputPhaseCurrent=tlpUpsInputPhaseCurrent, tlpAtsAlarmLoadOff23=tlpAtsAlarmLoadOff23, tlpAgentNumEmailContacts=tlpAgentNumEmailContacts, tlpAtsOutputEntry=tlpAtsOutputEntry, tlpPduSupportsOutletGroup=tlpPduSupportsOutletGroup, tlpPduDeviceTable=tlpPduDeviceTable, tlpAtsOutletGroupRowStatus=tlpAtsOutletGroupRowStatus, tlpUpsConfigColdStart=tlpUpsConfigColdStart, tlpUpsOutletGroupName=tlpUpsOutletGroupName, tlpPduAlarmLoadOff04=tlpPduAlarmLoadOff04, tlpUpsInputPhaseTable=tlpUpsInputPhaseTable, tlpAgentAttributesSupports=tlpAgentAttributesSupports, tlpAtsAlarmInputBad=tlpAtsAlarmInputBad, tlpUpsBatteryPackIdentTable=tlpUpsBatteryPackIdentTable, tlpPduAlarmOutputOverload=tlpPduAlarmOutputOverload, tlpAgentSnmpContactPort=tlpAgentSnmpContactPort, tlpAgentEmailContactAddress=tlpAgentEmailContactAddress, tlpUpsWatchdogSecsBeforeReboot=tlpUpsWatchdogSecsBeforeReboot, tlpSwitchDevice=tlpSwitchDevice, tlpAtsAlarmLoadOff32=tlpAtsAlarmLoadOff32, tlpPduAlarmLoadOff40=tlpPduAlarmLoadOff40, tlpUpsAlarmLoadOff23=tlpUpsAlarmLoadOff23, tlpUpsOutputLineVoltage=tlpUpsOutputLineVoltage, tlpAtsInputPhaseCurrent=tlpAtsInputPhaseCurrent, tlpAtsAlarmTemperature=tlpAtsAlarmTemperature, tlpSwitch=tlpSwitch, tlpPduDeviceMainLoadControllable=tlpPduDeviceMainLoadControllable, tlpUpsInputTable=tlpUpsInputTable, tlpAtsOutputSource=tlpAtsOutputSource, tlpUpsAlarmCurrentAboveThreshold3=tlpUpsAlarmCurrentAboveThreshold3, tlpCoolingDevice=tlpCoolingDevice, tlpEnvAlarmInputContact01=tlpEnvAlarmInputContact01, tlpUpsBattery=tlpUpsBattery, tlpAtsOutputActivePower=tlpAtsOutputActivePower, tlpPduAlarmLoadOff25=tlpPduAlarmLoadOff25, tlpAlarmControlDescr=tlpAlarmControlDescr, tlpUpsDeviceTestResultsStatus=tlpUpsDeviceTestResultsStatus, tlpAtsDeviceMainLoadControllable=tlpAtsDeviceMainLoadControllable, tlpPduAlarmOutputOff=tlpPduAlarmOutputOff, tlpAtsAlarmLoadOff11=tlpAtsAlarmLoadOff11, tlpPduAlarmLoadOff36=tlpPduAlarmLoadOff36, tlpAtsIdentNumOutletGroups=tlpAtsIdentNumOutletGroups, tlpPduAlarmLoadOff14=tlpPduAlarmLoadOff14, tlpUpsIdentNumOutlets=tlpUpsIdentNumOutlets, tlpPduBreakerStatus=tlpPduBreakerStatus, tlpAtsAlarmSource1Outage=tlpAtsAlarmSource1Outage, tlpPduOutletEntry=tlpPduOutletEntry, tlpAtsOutletPhase=tlpAtsOutletPhase, tlpPduInputEntry=tlpPduInputEntry, tlpAtsDeviceMainLoadCommand=tlpAtsDeviceMainLoadCommand, tlpAtsOutputCurrentMax=tlpAtsOutputCurrentMax, tlpCoolingDetail=tlpCoolingDetail, tlpUpsConfigAutoShedOnTransition=tlpUpsConfigAutoShedOnTransition, tlpPduDisplayOrientation=tlpPduDisplayOrientation, tlpUpsAlarmLoadOff22=tlpUpsAlarmLoadOff22, tlpUpsAlarmLoadOff14=tlpUpsAlarmLoadOff14, tlpPduInput=tlpPduInput, tlpAtsConfigSource1BrownoutSet=tlpAtsConfigSource1BrownoutSet, tlpPduAlarmLoadOff28=tlpPduAlarmLoadOff28, tlpPduHeatsinkEntry=tlpPduHeatsinkEntry, tlpUpsAlarmLoadOff31=tlpUpsAlarmLoadOff31, tlpDeviceManufacturer=tlpDeviceManufacturer, tlpCoolingAlarmEvaporatorFailure=tlpCoolingAlarmEvaporatorFailure, tlpPduAlarmInputBad=tlpPduAlarmInputBad, tlpAtsConfigSource2TransferReset=tlpAtsConfigSource2TransferReset, tlpEnvAlarmOutputContact=tlpEnvAlarmOutputContact, tlpEnvIdentTable=tlpEnvIdentTable, tlpAtsAlarmCurrentAboveThresholdA1=tlpAtsAlarmCurrentAboveThresholdA1, tlpEnvOutputContactInAlarm=tlpEnvOutputContactInAlarm, tlpAgentSnmpContactTable=tlpAgentSnmpContactTable, tlpUpsInputPhaseVoltage=tlpUpsInputPhaseVoltage, tlpUpsOutletGroupEntry=tlpUpsOutletGroupEntry, tlpRackTrackAlarms=tlpRackTrackAlarms, tlpCoolingAlarmDischargePressurePersistentHigh=tlpCoolingAlarmDischargePressurePersistentHigh, tlpAtsAlarmOutputOff=tlpAtsAlarmOutputOff, tlpPduSupportsOutletVoltage=tlpPduSupportsOutletVoltage, tlpUpsAlarmLoadOff34=tlpUpsAlarmLoadOff34, tlpCoolingAlarmEvaporatorTemperatureSensorFault=tlpCoolingAlarmEvaporatorTemperatureSensorFault, tlpUpsAlarmLoadOff37=tlpUpsAlarmLoadOff37, tlpAtsConfigSourceSelect=tlpAtsConfigSourceSelect, tlpAtsOutlet=tlpAtsOutlet, tlpUpsOutletGroupTable=tlpUpsOutletGroupTable, tlpAgentSnmpContactSnmpVersion=tlpAgentSnmpContactSnmpVersion, tlpPduAlarmLoadOff30=tlpPduAlarmLoadOff30, tlpPduAlarmLoadOff23=tlpPduAlarmLoadOff23, tlpUpsOutletDescription=tlpUpsOutletDescription, tlpEnvOutputContactNormalState=tlpEnvOutputContactNormalState, tlpPduAlarmCurrentAboveThreshold1=tlpPduAlarmCurrentAboveThreshold1, tlpDeviceIdentDateInstalled=tlpDeviceIdentDateInstalled, tlpAgentAttributesSSHMenuPort=tlpAgentAttributesSSHMenuPort, tlpUpsAlarmTempBad=tlpUpsAlarmTempBad, tlpAtsAlarmLoadOff31=tlpAtsAlarmLoadOff31, tlpUpsOutletCurrent=tlpUpsOutletCurrent, tlpAtsAlarmCircuitBreakerOpen01=tlpAtsAlarmCircuitBreakerOpen01, tlpDeviceIdentEntry=tlpDeviceIdentEntry, tlpUpsAlarmDiagnosticTestFailed=tlpUpsAlarmDiagnosticTestFailed, tlpPduControlTable=tlpPduControlTable, tlpAlarmControlSeverity=tlpAlarmControlSeverity, tlpAtsControlTable=tlpAtsControlTable, tlpAtsCircuitCurrentMin=tlpAtsCircuitCurrentMin, tlpAtsAlarmLoadOff01=tlpAtsAlarmLoadOff01, tlpUpsBatteryPackConfigMinCellVoltage=tlpUpsBatteryPackConfigMinCellVoltage, tlpAtsIdent=tlpAtsIdent, tlpAlarmCommunicationsLost=tlpAlarmCommunicationsLost, tlpUpsControlRamp=tlpUpsControlRamp, tlpPduAlarmLoadOff06=tlpPduAlarmLoadOff06, tlpAtsAlarmLoadOff22=tlpAtsAlarmLoadOff22, tlpUpsControlBypass=tlpUpsControlBypass, tlpPduInputLowTransferVoltage=tlpPduInputLowTransferVoltage, tlpAlarmsWellKnown=tlpAlarmsWellKnown, tlpEnvInputContactIndex=tlpEnvInputContactIndex, tlpAtsIdentNumCircuits=tlpAtsIdentNumCircuits, tlpAtsOutletBank=tlpAtsOutletBank, tlpUpsAlarmShutdownImminent=tlpUpsAlarmShutdownImminent, tlpPduDeviceOutputCurrentPrecision=tlpPduDeviceOutputCurrentPrecision, tlpAtsInputPhaseEntry=tlpAtsInputPhaseEntry, tlpAtsAlarmOutputBad=tlpAtsAlarmOutputBad, tlpAtsOutletCurrent=tlpAtsOutletCurrent, tlpUpsSupportsEntry=tlpUpsSupportsEntry, tlpAtsControlShed=tlpAtsControlShed, tlpAtsAlarmLoadsNotAllOn=tlpAtsAlarmLoadsNotAllOn, tlpUpsInputNominalFrequency=tlpUpsInputNominalFrequency, tlpPduOutletIndex=tlpPduOutletIndex, tlpPduOutletGroupEntry=tlpPduOutletGroupEntry, tlpSwitchIdentNumSwitch=tlpSwitchIdentNumSwitch, tlpAts=tlpAts, tlpAgentAttributesSNMPPort=tlpAgentAttributesSNMPPort, tlpPduAlarmCircuitBreakerOpen06=tlpPduAlarmCircuitBreakerOpen06, tlpAlarmUserDefined03=tlpAlarmUserDefined03, tlpUpsIdentNumOutletGroups=tlpUpsIdentNumOutletGroups, tlpUpsConfigOffMode=tlpUpsConfigOffMode, tlpCoolingAlarmFanUnderCurrent=tlpCoolingAlarmFanUnderCurrent, tlpAgentType=tlpAgentType, tlpUpsAlarmUpsOutputOff=tlpUpsAlarmUpsOutputOff, tlpAgentUuid=tlpAgentUuid, tlpCoolingAlarmRemoteShutdownViaInputContact=tlpCoolingAlarmRemoteShutdownViaInputContact, tlpPduCircuitPowerFactor=tlpPduCircuitPowerFactor, tlpPduAlarmLoadOff21=tlpPduAlarmLoadOff21, tlpDeviceModel=tlpDeviceModel, tlpAgentAttributesSupportsSNMP=tlpAgentAttributesSupportsSNMP, tlpUpsOutletGroupDescription=tlpUpsOutletGroupDescription, tlpPduDevicePowerOnDelay=tlpPduDevicePowerOnDelay, tlpUpsOutputNominalVoltage=tlpUpsOutputNominalVoltage, tlpUpsBatteryPackConfigCellCapacity=tlpUpsBatteryPackConfigCellCapacity, tlpAgentSettings=tlpAgentSettings, tlpEnvIdentTempSupported=tlpEnvIdentTempSupported, tlpUpsBatteryPackConfigEntry=tlpUpsBatteryPackConfigEntry, tlpAgentAttributesSNMPv2cEnabled=tlpAgentAttributesSNMPv2cEnabled, tlpNotifications=tlpNotifications, tlpPduAlarmLoadOff27=tlpPduAlarmLoadOff27, tlpUpsConfigLineSensitivity=tlpUpsConfigLineSensitivity, tlpCoolingAlarmCondensatePumpFault=tlpCoolingAlarmCondensatePumpFault, tlpAtsSupportsEnergywise=tlpAtsSupportsEnergywise, tlpPduCircuitCurrentMax=tlpPduCircuitCurrentMax, tlpPduControlPduReboot=tlpPduControlPduReboot, PYSNMP_MODULE_ID=tlpProducts, tlpUpsControlUpsOff=tlpUpsControlUpsOff, tlpSwitchConfig=tlpSwitchConfig, tlpUpsBatteryPackIdentSerialNum=tlpUpsBatteryPackIdentSerialNum, tlpAtsHeatsink=tlpAtsHeatsink, tlpAgentAttributesAutostartHTTPS=tlpAgentAttributesAutostartHTTPS, tlpCoolingAlarmCompressorFailure=tlpCoolingAlarmCompressorFailure, tlpAtsOutputCurrentMin=tlpAtsOutputCurrentMin, tlpPduOutputEntry=tlpPduOutputEntry, tlpAtsCircuit=tlpAtsCircuit, tlpPduIdentNumPhases=tlpPduIdentNumPhases, tlpAtsDeviceTemperatureF=tlpAtsDeviceTemperatureF, tlpAtsAlarmLoadOff03=tlpAtsAlarmLoadOff03, tlpUpsAlarmLoadOff17=tlpUpsAlarmLoadOff17, tlpUpsBatteryDetailCharge=tlpUpsBatteryDetailCharge, tlpAgentAttributesSnmp=tlpAgentAttributesSnmp, tlpUpsConfigFaultAction=tlpUpsConfigFaultAction, tlpPduDeviceMainLoadCommand=tlpPduDeviceMainLoadCommand, tlpUpsBatteryPackConfigStrings=tlpUpsBatteryPackConfigStrings, tlpAtsOutletIndex=tlpAtsOutletIndex, tlpUps=tlpUps, tlpPduIdentEntry=tlpPduIdentEntry, tlpUpsOutletGroup=tlpUpsOutletGroup, tlpAtsConfigInputVoltage=tlpAtsConfigInputVoltage, tlpAtsInputSourceInUse=tlpAtsInputSourceInUse, tlpCoolingAlarmAirFilterRunHoursViolation=tlpCoolingAlarmAirFilterRunHoursViolation, tlpCoolingAlarmSuctionTemperatureSensorFault=tlpCoolingAlarmSuctionTemperatureSensorFault, tlpPduSupportsTable=tlpPduSupportsTable, tlpUpsOutletGroupRowStatus=tlpUpsOutletGroupRowStatus, tlpPduAlarmCurrentAboveThreshold3=tlpPduAlarmCurrentAboveThreshold3, tlpUpsAlarmLoadOff33=tlpUpsAlarmLoadOff33, tlpPduInputTable=tlpPduInputTable, tlpAtsInputPhaseIndex=tlpAtsInputPhaseIndex, tlpAtsDisplayTable=tlpAtsDisplayTable, tlpAtsConfigSource2BrownoutSet=tlpAtsConfigSource2BrownoutSet, tlpAtsConfigSource1ReturnTime=tlpAtsConfigSource1ReturnTime, tlpUpsBatteryPackIdentEntry=tlpUpsBatteryPackIdentEntry, tlpAlarms=tlpAlarms, tlpUpsAlarmAwaitingPower=tlpUpsAlarmAwaitingPower, tlpPduIdent=tlpPduIdent, tlpAgentAttributesTelnetCLIPort=tlpAgentAttributesTelnetCLIPort, tlpUpsInputHighTransferVoltage=tlpUpsInputHighTransferVoltage, tlpPduInputPhaseVoltageMin=tlpPduInputPhaseVoltageMin, tlpAtsInputBadTransferVoltageUpperBound=tlpAtsInputBadTransferVoltageUpperBound, tlpEnvAlarmOutputContact01=tlpEnvAlarmOutputContact01, tlpUpsOutputLineEntry=tlpUpsOutputLineEntry, tlpAgentAttributesHTTPPort=tlpAgentAttributesHTTPPort, tlpAgentAttributesSNMPTrapPort=tlpAgentAttributesSNMPTrapPort, tlpAtsInputTable=tlpAtsInputTable, tlpPduAlarmLoadOff07=tlpPduAlarmLoadOff07, tlpAtsDeviceGeneralFault=tlpAtsDeviceGeneralFault, tlpAtsAlarmLoadOff39=tlpAtsAlarmLoadOff39, tlpCoolingAlarmSuctionPressureLow=tlpCoolingAlarmSuctionPressureLow, tlpAgentSnmpContactEntry=tlpAgentSnmpContactEntry, tlpCoolingAlarmReturnAirTempHigh=tlpCoolingAlarmReturnAirTempHigh, tlpAtsAlarmCircuitBreakerOpen04=tlpAtsAlarmCircuitBreakerOpen04, tlpPduInputNominalVoltagePhaseToNeutral=tlpPduInputNominalVoltagePhaseToNeutral, tlpRackTrackIdentNumRackTrack=tlpRackTrackIdentNumRackTrack, tlpUpsWatchdogEntry=tlpUpsWatchdogEntry, tlpUpsAlarmBusVoltageUnbalanced=tlpUpsAlarmBusVoltageUnbalanced, tlpAlarmUserDefined07=tlpAlarmUserDefined07, tlpAtsConfigEntry=tlpAtsConfigEntry, tlpPduAlarmLoadOff22=tlpPduAlarmLoadOff22, tlpUpsAlarmLoadOff32=tlpUpsAlarmLoadOff32, tlpAgentAttributesFTPPort=tlpAgentAttributesFTPPort, tlpPduInputPhaseVoltageMax=tlpPduInputPhaseVoltageMax, tlpUpsAlarmDepletedBattery=tlpUpsAlarmDepletedBattery, tlpPduControlRamp=tlpPduControlRamp, tlpUpsAlarmLoadLevelAboveThresholdPhase1=tlpUpsAlarmLoadLevelAboveThresholdPhase1, tlpEnvOutputContactName=tlpEnvOutputContactName, tlpAtsOutputTable=tlpAtsOutputTable, tlpEnvAlarmTemperatureBeyondLimits=tlpEnvAlarmTemperatureBeyondLimits, tlpKvmAlarms=tlpKvmAlarms, tlpPduDevice=tlpPduDevice, tlpAtsControl=tlpAtsControl, tlpAtsOutletGroupState=tlpAtsOutletGroupState, tlpCoolingAlarmFanOverCurrent=tlpCoolingAlarmFanOverCurrent, tlpPduCircuitIndex=tlpPduCircuitIndex, tlpKvmControl=tlpKvmControl, tlpPduDisplayTable=tlpPduDisplayTable, tlpAtsAlarmLoadOff20=tlpAtsAlarmLoadOff20, tlpUpsConfigAutoRestartLowVoltageCutoff=tlpUpsConfigAutoRestartLowVoltageCutoff, tlpPduAlarmOutputBad=tlpPduAlarmOutputBad, tlpAtsBreakerIndex=tlpAtsBreakerIndex, tlpAtsConfigHighVoltageReset=tlpAtsConfigHighVoltageReset, tlpEnvConfig=tlpEnvConfig, tlpEnvTemperatureC=tlpEnvTemperatureC, tlpAtsAlarmOutputOverload=tlpAtsAlarmOutputOverload, tlpPduAlarmLoadOff=tlpPduAlarmLoadOff, tlpEnvTemperatureInAlarm=tlpEnvTemperatureInAlarm, tlpAgentAttributesAutostart=tlpAgentAttributesAutostart, tlpDeviceID=tlpDeviceID, tlpAtsConfigAutoRampOnTransition=tlpAtsConfigAutoRampOnTransition, tlpAtsBreakerStatus=tlpAtsBreakerStatus, tlpUpsOutletVoltage=tlpUpsOutletVoltage, tlpAgentSnmpContactIpAddress=tlpAgentSnmpContactIpAddress, tlpCoolingAlarmDischargePressureHigh=tlpCoolingAlarmDischargePressureHigh)
mibBuilder.exportSymbols("TRIPPLITE-PRODUCTS", tlpEnvAlarmHumidityBeyondLimits=tlpEnvAlarmHumidityBeyondLimits, tlpPduAlarmCurrentAboveThreshold2=tlpPduAlarmCurrentAboveThreshold2, tlpCoolingConfig=tlpCoolingConfig, tlpAtsInputLineIndex=tlpAtsInputLineIndex, tlpPduBreakerEntry=tlpPduBreakerEntry, tlpAtsOutput=tlpAtsOutput, tlpPduDeviceTemperatureC=tlpPduDeviceTemperatureC, tlpEnvAlarmOutputContact02=tlpEnvAlarmOutputContact02, tlpAtsCircuitEntry=tlpAtsCircuitEntry, tlpUpsBatteryDetailCurrent=tlpUpsBatteryDetailCurrent, tlpAtsInputPhaseVoltage=tlpAtsInputPhaseVoltage, tlpAtsConfigSourceTransferSetMinimum=tlpAtsConfigSourceTransferSetMinimum, tlpEnvHumidityEntry=tlpEnvHumidityEntry, tlpAgentEmailContactTable=tlpAgentEmailContactTable, tlpUpsConfigAutoRestartDelayedWakeup=tlpUpsConfigAutoRestartDelayedWakeup, tlpUpsConfigOutputFrequency=tlpUpsConfigOutputFrequency, tlpAlarmUserDefined05=tlpAlarmUserDefined05, tlpUpsDeviceTemperatureF=tlpUpsDeviceTemperatureF, tlpEnvAlarmInputContact=tlpEnvAlarmInputContact, tlpUpsConfigAudibleStatus=tlpUpsConfigAudibleStatus, tlpAlarmControlDetail=tlpAlarmControlDetail, tlpAgentSnmpContactRowStatus=tlpAgentSnmpContactRowStatus, tlpUpsAlarmLoadOff20=tlpUpsAlarmLoadOff20, tlpAtsOutletVoltage=tlpAtsOutletVoltage, tlpUpsAlarmRuntimeBelowWarningLevel=tlpUpsAlarmRuntimeBelowWarningLevel, tlpEnvIdent=tlpEnvIdent, tlpAtsAlarmLoadOff=tlpAtsAlarmLoadOff, tlpAtsDeviceMainLoadState=tlpAtsDeviceMainLoadState, tlpPduControlPduOn=tlpPduControlPduOn, tlpCoolingAlarmPowerButtonPressed=tlpCoolingAlarmPowerButtonPressed, tlpEnvInputContactInAlarm=tlpEnvInputContactInAlarm, tlpPduIdentNumBreakers=tlpPduIdentNumBreakers, tlpPduOutletGroupName=tlpPduOutletGroupName, tlpDeviceStatus=tlpDeviceStatus, tlpAtsDeviceTotalInputPowerRating=tlpAtsDeviceTotalInputPowerRating, tlpRackTrackConfig=tlpRackTrackConfig, tlpCoolingAlarmCondenserOutletAirSensorFault=tlpCoolingAlarmCondenserOutletAirSensorFault, tlpAtsOutputPhaseType=tlpAtsOutputPhaseType, tlpUpsAlarmOutputOffAsRequested=tlpUpsAlarmOutputOffAsRequested, tlpPduIdentNumOutputs=tlpPduIdentNumOutputs, tlpUpsOutputLinePercentLoad=tlpUpsOutputLinePercentLoad, tlpPduHeatsinkTemperatureC=tlpPduHeatsinkTemperatureC, tlpEnvOutputContactCurrentState=tlpEnvOutputContactCurrentState, tlpAtsOutletShedAction=tlpAtsOutletShedAction, tlpUpsAlarmOnBattery=tlpUpsAlarmOnBattery, tlpUpsAlarmLoadOff10=tlpUpsAlarmLoadOff10, tlpPduCircuitTotalPower=tlpPduCircuitTotalPower, tlpAlarmAcknowledged=tlpAlarmAcknowledged, tlpDeviceIdentCurrentUptime=tlpDeviceIdentCurrentUptime, tlpAgentAttributesSNMPv3Enabled=tlpAgentAttributesSNMPv3Enabled, tlpUpsAlarmExternalSmartBatteryAgeAboveThreshold=tlpUpsAlarmExternalSmartBatteryAgeAboveThreshold, tlpAgentDetails=tlpAgentDetails, tlpAtsHeatsinkEntry=tlpAtsHeatsinkEntry, tlpUpsOutletShedAction=tlpUpsOutletShedAction, tlpAlarmTime=tlpAlarmTime, tlpUpsAlarmLoadOff29=tlpUpsAlarmLoadOff29, tlpUpsOutletPower=tlpUpsOutletPower, tlpUpsConfig=tlpUpsConfig, tlpUpsAlarmLoadOff07=tlpUpsAlarmLoadOff07, tlpEnvInputContactEntry=tlpEnvInputContactEntry, tlpUpsInputPhaseVoltageMax=tlpUpsInputPhaseVoltageMax, tlpUpsAlarmBatteryAgeAboveThreshold=tlpUpsAlarmBatteryAgeAboveThreshold, tlpUpsBatteryPackDetailCondition=tlpUpsBatteryPackDetailCondition, tlpPduOutletPhase=tlpPduOutletPhase, tlpDeviceIdentFirmwareVersion=tlpDeviceIdentFirmwareVersion, tlpPduSupportsOutletCurrentPower=tlpPduSupportsOutletCurrentPower, tlpAgentAttributesSupportsTelnetMenu=tlpAgentAttributesSupportsTelnetMenu, tlpUpsAlarmUpsSystemOff=tlpUpsAlarmUpsSystemOff, tlpPduAlarmLoadOff01=tlpPduAlarmLoadOff01, tlpEnvConfigTable=tlpEnvConfigTable, tlpEnvOutputContactIndex=tlpEnvOutputContactIndex, tlpPduInputHighTransferVoltageLowerBound=tlpPduInputHighTransferVoltageLowerBound, tlpUpsConfigOutputVoltage=tlpUpsConfigOutputVoltage, tlpUpsAlarmLoadOff35=tlpUpsAlarmLoadOff35, tlpPduAlarms=tlpPduAlarms, tlpAtsAlarmLoadOff17=tlpAtsAlarmLoadOff17, tlpCoolingAlarmSupplyAirSensorFault=tlpCoolingAlarmSupplyAirSensorFault, tlpUpsEstimatedMinutesRemaining=tlpUpsEstimatedMinutesRemaining, tlpAtsAlarmCurrentAboveThresholdA2=tlpAtsAlarmCurrentAboveThresholdA2, tlpPduAlarmCircuitBreakerOpen02=tlpPduAlarmCircuitBreakerOpen02, tlpAtsCircuitTotalCurrent=tlpAtsCircuitTotalCurrent, tlpKvmIdentNumKvm=tlpKvmIdentNumKvm, tlpUpsAlarmSiteWiringFault=tlpUpsAlarmSiteWiringFault, tlpUpsSupportsTable=tlpUpsSupportsTable, tlpSwitchDetail=tlpSwitchDetail, tlpAtsSupportsRampShed=tlpAtsSupportsRampShed, tlpAtsAlarmLoadOff15=tlpAtsAlarmLoadOff15, tlpEnvIdentHumiditySupported=tlpEnvIdentHumiditySupported, tlpAtsConfigSourceTransferSetMaximum=tlpAtsConfigSourceTransferSetMaximum, tlpAtsInputHighTransferVoltageUpperBound=tlpAtsInputHighTransferVoltageUpperBound, tlpPduOutputActivePower=tlpPduOutputActivePower, tlpPduConfigInputVoltage=tlpPduConfigInputVoltage, tlpAtsOutletCircuit=tlpAtsOutletCircuit, tlpUpsAlarmLoadOff25=tlpUpsAlarmLoadOff25, tlpCoolingAlarmCondenserFailure=tlpCoolingAlarmCondenserFailure, tlpUpsOutletTable=tlpUpsOutletTable, tlpUpsBatteryPackConfigCapacityUnits=tlpUpsBatteryPackConfigCapacityUnits, tlpUpsAlarmOutputCurrentChanged=tlpUpsAlarmOutputCurrentChanged, tlpUpsAlarmSmartBatteryCommLost=tlpUpsAlarmSmartBatteryCommLost, tlpAtsAlarmLoadOff27=tlpAtsAlarmLoadOff27, tlpUpsInput=tlpUpsInput, tlpPduControlPduOff=tlpPduControlPduOff, tlpAtsBreakerEntry=tlpAtsBreakerEntry, tlpDeviceRowStatus=tlpDeviceRowStatus, tlpCoolingAlarmSupplyAirTempHigh=tlpCoolingAlarmSupplyAirTempHigh, tlpPduCircuitTable=tlpPduCircuitTable, tlpDeviceIdentSerialNum=tlpDeviceIdentSerialNum, tlpUpsAlarmLoadOff15=tlpUpsAlarmLoadOff15, tlpPduHeatsinkTable=tlpPduHeatsinkTable, tlpAtsCircuitCurrentLimit=tlpAtsCircuitCurrentLimit, tlpPduCircuitCurrentMin=tlpPduCircuitCurrentMin, tlpUpsAlarmLoadOff06=tlpUpsAlarmLoadOff06, tlpAtsAlarmLoadOff16=tlpAtsAlarmLoadOff16, tlpUpsAlarmLoadOff24=tlpUpsAlarmLoadOff24, tlpAlarmDescr=tlpAlarmDescr, tlpDeviceNumDevices=tlpDeviceNumDevices, tlpAtsConfigVoltageRangeTable=tlpAtsConfigVoltageRangeTable, tlpRackTrackControl=tlpRackTrackControl, tlpAtsAlarmCurrentAboveThreshold=tlpAtsAlarmCurrentAboveThreshold, tlpAtsConfigSource2TransferSet=tlpAtsConfigSource2TransferSet, tlpUpsAlarmInverterSoftStartBad=tlpUpsAlarmInverterSoftStartBad, tlpPduOutputCurrentMax=tlpPduOutputCurrentMax, tlpPduControl=tlpPduControl, tlpAtsAlarms=tlpAtsAlarms, tlpCoolingAlarmSuctionPressureSensorFault=tlpCoolingAlarmSuctionPressureSensorFault, tlpRackTrackDetail=tlpRackTrackDetail, tlpAgentNumSnmpContacts=tlpAgentNumSnmpContacts, tlpAtsInputPhaseVoltageMin=tlpAtsInputPhaseVoltageMin, tlpPduInputHighTransferVoltage=tlpPduInputHighTransferVoltage, tlpAtsInputNominalVoltagePhaseToPhase=tlpAtsInputNominalVoltagePhaseToPhase, tlpCoolingAlarmSuctionPressureLowStartFailure=tlpCoolingAlarmSuctionPressureLowStartFailure, tlpPduOutletName=tlpPduOutletName, tlpUpsAlarmShutdownPending=tlpUpsAlarmShutdownPending, tlpAlarmDetail=tlpAlarmDetail, tlpPduAlarmLoadsNotAllOn=tlpPduAlarmLoadsNotAllOn, tlpKvmDevice=tlpKvmDevice, tlpPduAlarmLoadOff17=tlpPduAlarmLoadOff17, tlpAtsConfigSource2ReturnTime=tlpAtsConfigSource2ReturnTime, tlpUpsConfigTable=tlpUpsConfigTable, tlpUpsAlarmLoadLevelAboveThreshold=tlpUpsAlarmLoadLevelAboveThreshold, tlpUpsOutletShedDelay=tlpUpsOutletShedDelay, tlpPduAlarmLoadOff05=tlpPduAlarmLoadOff05, tlpUpsWatchdog=tlpUpsWatchdog, tlpUpsAlarmLowBattery=tlpUpsAlarmLowBattery, tlpAtsAlarmLoadOff21=tlpAtsAlarmLoadOff21, tlpAtsOutletName=tlpAtsOutletName, tlpAlarmState=tlpAlarmState, tlpAtsOutletGroupIndex=tlpAtsOutletGroupIndex, tlpPdu=tlpPdu, tlpAtsAlarmCurrentAboveThresholdB1=tlpAtsAlarmCurrentAboveThresholdB1, tlpAgentSnmpContactSecurityName=tlpAgentSnmpContactSecurityName, tlpPduOutletGroupDescription=tlpPduOutletGroupDescription, tlpAtsOutputPhase=tlpAtsOutputPhase, tlpUpsAlarmLoadLevelAboveThresholdTotal=tlpUpsAlarmLoadLevelAboveThresholdTotal, tlpAtsInputHighTransferVoltage=tlpAtsInputHighTransferVoltage, tlpAlarmType=tlpAlarmType, tlpUpsBatteryPackIdentIndex=tlpUpsBatteryPackIdentIndex, tlpUpsBatteryPackIdentManufacturer=tlpUpsBatteryPackIdentManufacturer, tlpAtsOutletRampDelay=tlpAtsOutletRampDelay, tlpUpsInputPhaseIndex=tlpUpsInputPhaseIndex, tlpAtsInputNominalVoltagePhaseToNeutral=tlpAtsInputNominalVoltagePhaseToNeutral, tlpAlarmEntry=tlpAlarmEntry, tlpPduAlarmLoadOff39=tlpPduAlarmLoadOff39, tlpAgentSnmpContactAuthPassword=tlpAgentSnmpContactAuthPassword, tlpUpsOutputSource=tlpUpsOutputSource, tlpUpsAlarmLoadOff02=tlpUpsAlarmLoadOff02, tlpUpsConfigEntry=tlpUpsConfigEntry, tlpUpsAlarmBusUnderVoltage=tlpUpsAlarmBusUnderVoltage, tlpDeviceType=tlpDeviceType, tlpAtsOutputCurrent=tlpAtsOutputCurrent, tlpEnvInputContactName=tlpEnvInputContactName, tlpAgentConfigRemoteRegistration=tlpAgentConfigRemoteRegistration, tlpPduConfigEntry=tlpPduConfigEntry, tlpPduAlarmCurrentAboveThreshold=tlpPduAlarmCurrentAboveThreshold, tlpUpsIdentNumUps=tlpUpsIdentNumUps, tlpPduDisplayScheme=tlpPduDisplayScheme, tlpAtsControlResetGeneralFault=tlpAtsControlResetGeneralFault, tlpUpsAlarmOnBypass=tlpUpsAlarmOnBypass, tlpCoolingAlarmInverterCommunicationsFault=tlpCoolingAlarmInverterCommunicationsFault, tlpAgentMAC=tlpAgentMAC, tlpRackTrack=tlpRackTrack, tlpEnvAlarmInputContact04=tlpEnvAlarmInputContact04, tlpUpsBatteryDetailChargerStatus=tlpUpsBatteryDetailChargerStatus, tlpUpsAlarmLoadsNotAllOn=tlpUpsAlarmLoadsNotAllOn, tlpUpsAlarmLoadOff39=tlpUpsAlarmLoadOff39, tlpAlarmTableRowRef=tlpAlarmTableRowRef, tlpUpsBatteryPackConfigChemistry=tlpUpsBatteryPackConfigChemistry, tlpAtsDeviceTemperatureC=tlpAtsDeviceTemperatureC, tlpUpsDevicePowerOnDelay=tlpUpsDevicePowerOnDelay, tlpAtsDeviceTable=tlpAtsDeviceTable, tlpAtsOutletControllable=tlpAtsOutletControllable, tlpEnvOutputContactEntry=tlpEnvOutputContactEntry, tlpUpsSupportsOutletCurrentPower=tlpUpsSupportsOutletCurrentPower, tlpAtsAlarmLoadOff09=tlpAtsAlarmLoadOff09, tlpPduIdentNumOutletGroups=tlpPduIdentNumOutletGroups, tlpUpsBatteryPackIdentSKU=tlpUpsBatteryPackIdentSKU, tlpCoolingAlarmDischargePressureSensorFault=tlpCoolingAlarmDischargePressureSensorFault, tlpPduDisplayUnits=tlpPduDisplayUnits, tlpPduAlarmLoadLevelAboveThreshold=tlpPduAlarmLoadLevelAboveThreshold, tlpAgentEmailContacts=tlpAgentEmailContacts, tlpNotify=tlpNotify, tlpAtsAlarmSource1InvalidFrequency=tlpAtsAlarmSource1InvalidFrequency, tlpAtsInputBadVoltageThreshold=tlpAtsInputBadVoltageThreshold, tlpUpsBatteryDetailCapacity=tlpUpsBatteryDetailCapacity, tlpPduOutputPowerFactor=tlpPduOutputPowerFactor, tlpSwitchIdent=tlpSwitchIdent, tlpPduAlarmLoadOff19=tlpPduAlarmLoadOff19, tlpAtsDeviceAggregatePowerFactor=tlpAtsDeviceAggregatePowerFactor, tlpAlarmUserDefined=tlpAlarmUserDefined, tlpPduDeviceEntry=tlpPduDeviceEntry, tlpUpsAlarmLoadOff28=tlpUpsAlarmLoadOff28, tlpAtsOutletGroupDescription=tlpAtsOutletGroupDescription, tlpAtsControlAtsOn=tlpAtsControlAtsOn, tlpUpsBatteryPackConfigNumBatteries=tlpUpsBatteryPackConfigNumBatteries, tlpUpsBypass=tlpUpsBypass, tlpUpsAlarmInverterUnderVoltage=tlpUpsAlarmInverterUnderVoltage, tlpEnvTemperatureF=tlpEnvTemperatureF, tlpAtsInputBadTransferVoltageLowerBound=tlpAtsInputBadTransferVoltageLowerBound, tlpPduCircuit=tlpPduCircuit, tlpPduConfig=tlpPduConfig, tlpAtsAlarmLoadOff13=tlpAtsAlarmLoadOff13, tlpAtsOutletShedDelay=tlpAtsOutletShedDelay, tlpSwitchAlarms=tlpSwitchAlarms, tlpUpsIdentTable=tlpUpsIdentTable, tlpUpsAlarmBatteryUnderVoltage=tlpUpsAlarmBatteryUnderVoltage, tlpEnvAlarmOutputContact04=tlpEnvAlarmOutputContact04, tlpPduInputNominalVoltagePhaseToPhase=tlpPduInputNominalVoltagePhaseToPhase, tlpEnvirosense=tlpEnvirosense, tlpAtsAlarmLoadOff02=tlpAtsAlarmLoadOff02, tlpUpsConfigAutoRestartOverLoad=tlpUpsConfigAutoRestartOverLoad, tlpAtsAlarmLoadOff28=tlpAtsAlarmLoadOff28, tlpAlarmUserDefined06=tlpAlarmUserDefined06, tlpCoolingAlarmSuctionPressurePersistentLow=tlpCoolingAlarmSuctionPressurePersistentLow, tlpUpsBatteryPackDetailTemperatureF=tlpUpsBatteryPackDetailTemperatureF, tlpUpsSupportsOutletGroup=tlpUpsSupportsOutletGroup, tlpCoolingAlarmLowRefrigerantStartupFault=tlpCoolingAlarmLowRefrigerantStartupFault, tlpPduAlarmLoadOff13=tlpPduAlarmLoadOff13, tlpSoftware=tlpSoftware, tlpAlarmUserDefined04=tlpAlarmUserDefined04, tlpAtsOutletEntry=tlpAtsOutletEntry, tlpUpsAlarmLoadOff11=tlpUpsAlarmLoadOff11, tlpCoolingAlarmWaterLeak=tlpCoolingAlarmWaterLeak, tlpPduIdentNumOutlets=tlpPduIdentNumOutlets, tlpPduOutputVoltage=tlpPduOutputVoltage, tlpAtsConfigTable=tlpAtsConfigTable, tlpUpsControl=tlpUpsControl, tlpEnvNumInputContacts=tlpEnvNumInputContacts, tlpPduOutputSource=tlpPduOutputSource, tlpPduAlarmLoadOff18=tlpPduAlarmLoadOff18, tlpUpsBypassTable=tlpUpsBypassTable, tlpPduCircuitTotalCurrent=tlpPduCircuitTotalCurrent, tlpPduDisplayIntensity=tlpPduDisplayIntensity, tlpCoolingAlarms=tlpCoolingAlarms, tlpAlarmControl=tlpAlarmControl)
mibBuilder.exportSymbols("TRIPPLITE-PRODUCTS", tlpUpsBypassFrequency=tlpUpsBypassFrequency, tlpAtsBreakerTable=tlpAtsBreakerTable, tlpAtsSupportsOutletVoltage=tlpAtsSupportsOutletVoltage, tlpDevice=tlpDevice, tlpPduAlarmCircuitBreakerOpen=tlpPduAlarmCircuitBreakerOpen, tlpUpsBypassLineCurrent=tlpUpsBypassLineCurrent, tlpPduOutletState=tlpPduOutletState, tlpPduIdentNumCircuits=tlpPduIdentNumCircuits, tlpCoolingAlarmWaterFull=tlpCoolingAlarmWaterFull, tlpUpsOutletControllable=tlpUpsOutletControllable, tlpPduOutletGroupTable=tlpPduOutletGroupTable, tlpUpsBatteryPackConfigStyle=tlpUpsBatteryPackConfigStyle, tlpUpsAlarmUpsOffAsRequested=tlpUpsAlarmUpsOffAsRequested, tlpAtsInputPhaseFrequency=tlpAtsInputPhaseFrequency, tlpPduOutletGroupRowStatus=tlpPduOutletGroupRowStatus, tlpUpsDeviceEntry=tlpUpsDeviceEntry, tlpUpsAlarmBusOverVoltage=tlpUpsAlarmBusOverVoltage, tlpDeviceIdentTotalUptime=tlpDeviceIdentTotalUptime, tlpPduOutputCurrentMin=tlpPduOutputCurrentMin, tlpPduOutputCurrent=tlpPduOutputCurrent, tlpUpsAlarmOutputBad=tlpUpsAlarmOutputBad, tlpPduOutletCircuit=tlpPduOutletCircuit, tlpUpsConfigThresholdTable=tlpUpsConfigThresholdTable, tlpAtsInputSourceTransitionCount=tlpAtsInputSourceTransitionCount, tlpUpsAlarms=tlpUpsAlarms, tlpPduInputPhaseFrequency=tlpPduInputPhaseFrequency, tlpAtsConfigAutoShedOnTransition=tlpAtsConfigAutoShedOnTransition, tlpAtsAlarmSource2Temperature=tlpAtsAlarmSource2Temperature, tlpAgentConfig=tlpAgentConfig, tlpAtsDevice=tlpAtsDevice, tlpUpsOutletEntry=tlpUpsOutletEntry, tlpAtsHeatsinkTemperatureF=tlpAtsHeatsinkTemperatureF, tlpAgentAttributesAutostartSSHMenu=tlpAgentAttributesAutostartSSHMenu, tlpUpsInputPhaseEntry=tlpUpsInputPhaseEntry, tlpPduCircuitInputVoltage=tlpPduCircuitInputVoltage, tlpPduOutletRampDelay=tlpPduOutletRampDelay, tlpAgentEmailContactName=tlpAgentEmailContactName, tlpAtsAlarmLoadLevelAboveThreshold=tlpAtsAlarmLoadLevelAboveThreshold, tlpPduInputPhaseTable=tlpPduInputPhaseTable, tlpCoolingInput=tlpCoolingInput, tlpUpsDetail=tlpUpsDetail, tlpAtsDisplayOrientation=tlpAtsDisplayOrientation, tlpAgentAttributesAutostartTelnetCLI=tlpAgentAttributesAutostartTelnetCLI, tlpPduBreakerIndex=tlpPduBreakerIndex, tlpAtsAlarmCurrentAboveThresholdA3=tlpAtsAlarmCurrentAboveThresholdA3, tlpAtsAlarmLoadOff35=tlpAtsAlarmLoadOff35, tlpAtsAlarmCurrentAboveThresholdB2=tlpAtsAlarmCurrentAboveThresholdB2, tlpAtsOutletGroupEntry=tlpAtsOutletGroupEntry, tlpAtsCircuitInputVoltage=tlpAtsCircuitInputVoltage, tlpUpsBatteryPackConfigCellsPerBattery=tlpUpsBatteryPackConfigCellsPerBattery, tlpUpsOutletGroupIndex=tlpUpsOutletGroupIndex, tlpCoolingAlarmDisconnectedFromDevice=tlpCoolingAlarmDisconnectedFromDevice, tlpAtsHeatsinkTemperatureC=tlpAtsHeatsinkTemperatureC, tlpUpsOutputEntry=tlpUpsOutputEntry, tlpPduOutlet=tlpPduOutlet, tlpAtsAlarmLoadOff05=tlpAtsAlarmLoadOff05, tlpCoolingAlarmReturnAirSensorFault=tlpCoolingAlarmReturnAirSensorFault, tlpRackTrackIdent=tlpRackTrackIdent, tlpUpsOutput=tlpUpsOutput, tlpCoolingAlarmCurrentLimit=tlpCoolingAlarmCurrentLimit, tlpUpsConfigAutoRestartEntry=tlpUpsConfigAutoRestartEntry, tlpEnvAlarmInputContact02=tlpEnvAlarmInputContact02, tlpAgentSnmpContactIndex=tlpAgentSnmpContactIndex, tlpPduInputPhaseVoltage=tlpPduInputPhaseVoltage, tlpAgentSerialNum=tlpAgentSerialNum, tlpUpsBatteryPackDetailTable=tlpUpsBatteryPackDetailTable, tlpUpsInputHighTransferVoltageLowerBound=tlpUpsInputHighTransferVoltageLowerBound, tlpCoolingAlarmCondenserInletAirSensorFault=tlpCoolingAlarmCondenserInletAirSensorFault, tlpUpsAlarmOutputOverload=tlpUpsAlarmOutputOverload, tlpAtsOutletGroupTable=tlpAtsOutletGroupTable, tlpAgentAttributesTelnetMenuPort=tlpAgentAttributesTelnetMenuPort, tlpAtsAlarmLoadOff12=tlpAtsAlarmLoadOff12, tlpUpsInputLowTransferVoltageUpperBound=tlpUpsInputLowTransferVoltageUpperBound, tlpAtsAlarmLoadOff18=tlpAtsAlarmLoadOff18, tlpUpsOutletGroupCommand=tlpUpsOutletGroupCommand, tlpAtsAlarmCircuitBreakerOpen06=tlpAtsAlarmCircuitBreakerOpen06, tlpAgentAttributesAutostartSSHCLI=tlpAgentAttributesAutostartSSHCLI, tlpEnvConfigEntry=tlpEnvConfigEntry, tlpUpsOutletRampAction=tlpUpsOutletRampAction, tlpAgentSnmpContacts=tlpAgentSnmpContacts, tlpAtsConfigOverLoadThreshold=tlpAtsConfigOverLoadThreshold, tlpAtsDisplayUnits=tlpAtsDisplayUnits, tlpAgentAttributesAutostartTelnetMenu=tlpAgentAttributesAutostartTelnetMenu, tlpPduAlarmLoadOff29=tlpPduAlarmLoadOff29, tlpAgentEmailContactEntry=tlpAgentEmailContactEntry, tlpAtsHeatsinkTable=tlpAtsHeatsinkTable, tlpAtsAlarmLoadOff19=tlpAtsAlarmLoadOff19, tlpPduAlarmLoadOff26=tlpPduAlarmLoadOff26, tlpUpsBatteryPackDetailEntry=tlpUpsBatteryPackDetailEntry, tlpEnvNumOutputContacts=tlpEnvNumOutputContacts, tlpAtsIdentNumOutputs=tlpAtsIdentNumOutputs, tlpEnvHumidityHumidity=tlpEnvHumidityHumidity, tlpAtsOutletPower=tlpAtsOutletPower, tlpAlarmControlTable=tlpAlarmControlTable, tlpAtsAlarmLoadOff06=tlpAtsAlarmLoadOff06, tlpUpsConfigBatteryAgeThreshold=tlpUpsConfigBatteryAgeThreshold, tlpAtsIdentNumInputs=tlpAtsIdentNumInputs, tlpEnvTemperatureHighLimit=tlpEnvTemperatureHighLimit, tlpAlarmUserDefined09=tlpAlarmUserDefined09, tlpPduAlarmLoadOff38=tlpPduAlarmLoadOff38, tlpNotifySystemStartup=tlpNotifySystemStartup, tlpUpsConfigEconomicMode=tlpUpsConfigEconomicMode, tlpAtsConfigSourceBrownoutSetMaximum=tlpAtsConfigSourceBrownoutSetMaximum, tlpUpsBypassLineEntry=tlpUpsBypassLineEntry, tlpUpsBatteryPackConfigLocation=tlpUpsBatteryPackConfigLocation, tlpUpsIdentNumInputs=tlpUpsIdentNumInputs, tlpUpsIdent=tlpUpsIdent, tlpUpsAlarmCurrentAboveThreshold2=tlpUpsAlarmCurrentAboveThreshold2, tlpUpsBatteryDetailTable=tlpUpsBatteryDetailTable, tlpAlarmsPresent=tlpAlarmsPresent, tlpAtsInput=tlpAtsInput, tlpAtsCircuitPhase=tlpAtsCircuitPhase, tlpUpsOutletGroupState=tlpUpsOutletGroupState, tlpHardware=tlpHardware, tlpPduAlarmLoadOff31=tlpPduAlarmLoadOff31, tlpPduInputPhaseEntry=tlpPduInputPhaseEntry, tlpAtsAlarmOutage=tlpAtsAlarmOutage, tlpAtsConfigSource1TransferSet=tlpAtsConfigSource1TransferSet, tlpPduInputPhasePhaseType=tlpPduInputPhasePhaseType, tlpPduOutput=tlpPduOutput, tlpAtsAlarmLoadOff08=tlpAtsAlarmLoadOff08, tlpPduAlarmLoadOff09=tlpPduAlarmLoadOff09, tlpUpsAlarmLoadOff=tlpUpsAlarmLoadOff, tlpAtsIdentNumOutlets=tlpAtsIdentNumOutlets, tlpPduOutletGroupIndex=tlpPduOutletGroupIndex, tlpUpsBatterySummaryTable=tlpUpsBatterySummaryTable, tlpUpsAlarmGeneralFault=tlpUpsAlarmGeneralFault, tlpAgentAttributesPorts=tlpAgentAttributesPorts, tlpUpsAlarmLoadOff13=tlpUpsAlarmLoadOff13, tlpAgentConfigCurrentTime=tlpAgentConfigCurrentTime, tlpAgentEmailContactIndex=tlpAgentEmailContactIndex, tlpUpsDeviceTable=tlpUpsDeviceTable, tlpUpsConfigAutoBatteryTest=tlpUpsConfigAutoBatteryTest, tlpUpsInputPhaseFrequency=tlpUpsInputPhaseFrequency, tlpAgentDriverVersion=tlpAgentDriverVersion, tlpUpsAlarmLoadOff19=tlpUpsAlarmLoadOff19, tlpEnvInputContactCurrentState=tlpEnvInputContactCurrentState, tlpUpsSupportsRampShed=tlpUpsSupportsRampShed, tlpAlarmControlEntry=tlpAlarmControlEntry, tlpEnvAlarmInputContact03=tlpEnvAlarmInputContact03, tlpPduHeatsinkTemperatureF=tlpPduHeatsinkTemperatureF, tlpAgentAttributesSupportsSNMPTrap=tlpAgentAttributesSupportsSNMPTrap, tlpAtsAlarmLoadOff07=tlpAtsAlarmLoadOff07, tlpAtsInputCurrentLimit=tlpAtsInputCurrentLimit, tlpAgentVersion=tlpAgentVersion, tlpUpsBatteryPackDetailLastReplaceDate=tlpUpsBatteryPackDetailLastReplaceDate, tlpPduIdentNumInputs=tlpPduIdentNumInputs, tlpPduControlEntry=tlpPduControlEntry, tlpUpsAlarmOverTemperatureProtection=tlpUpsAlarmOverTemperatureProtection, tlpAgentSnmpContactName=tlpAgentSnmpContactName, tlpPduAlarmLoadOff11=tlpPduAlarmLoadOff11, tlpPduAlarmLoadOff02=tlpPduAlarmLoadOff02, tlpNotificationsAlarmEntryAdded=tlpNotificationsAlarmEntryAdded, tlpUpsBatteryPackConfigMaxCellVoltage=tlpUpsBatteryPackConfigMaxCellVoltage, tlpUpsAlarmLoadOff26=tlpUpsAlarmLoadOff26, tlpAtsAlarmOverVoltage=tlpAtsAlarmOverVoltage, tlpAgentAttributesSNMPv1Enabled=tlpAgentAttributesSNMPv1Enabled, tlpUpsBatteryDetailVoltage=tlpUpsBatteryDetailVoltage, tlpUpsDeviceTestDate=tlpUpsDeviceTestDate, tlpAtsAlarmLoadOff40=tlpAtsAlarmLoadOff40, tlpUpsInputLowTransferVoltage=tlpUpsInputLowTransferVoltage, tlpEnvTemperatureEntry=tlpEnvTemperatureEntry, tlpPduOutletDescription=tlpPduOutletDescription, tlpDeviceDetail=tlpDeviceDetail, tlpUpsDevice=tlpUpsDevice, tlpAtsOutputIndex=tlpAtsOutputIndex, tlpAtsInputEntry=tlpAtsInputEntry, tlpUpsAlarmBusStartVoltageLow=tlpUpsAlarmBusStartVoltageLow, tlpAtsAlarmVoltage=tlpAtsAlarmVoltage, tlpAtsAlarmCircuitBreakerOpen05=tlpAtsAlarmCircuitBreakerOpen05, tlpAtsOutputPowerFactor=tlpAtsOutputPowerFactor, tlpDeviceLocation=tlpDeviceLocation, tlpEnvIdentEntry=tlpEnvIdentEntry, tlpPduAlarmLoadOff35=tlpPduAlarmLoadOff35, tlpAtsAlarmSource1Temperature=tlpAtsAlarmSource1Temperature, tlpUpsOutputLineFrequency=tlpUpsOutputLineFrequency, tlpCoolingAlarmEvaporatorCoolingFailure=tlpCoolingAlarmEvaporatorCoolingFailure, tlpAtsCircuitPowerFactor=tlpAtsCircuitPowerFactor, tlpPduIdentNumHeatsinks=tlpPduIdentNumHeatsinks, tlpPduOutletBank=tlpPduOutletBank, tlpAtsAlarmLoadOff38=tlpAtsAlarmLoadOff38, tlpUpsConfigLowBatteryTime=tlpUpsConfigLowBatteryTime, tlpAtsAlarmSource2InvalidFrequency=tlpAtsAlarmSource2InvalidFrequency, tlpUpsWatchdogSupported=tlpUpsWatchdogSupported, tlpAtsConfigOverCurrentThreshold=tlpAtsConfigOverCurrentThreshold, tlpUpsConfigAutoRampOnTransition=tlpUpsConfigAutoRampOnTransition, tlpPduOutletShedAction=tlpPduOutletShedAction, tlpCoolingIdentNumCooling=tlpCoolingIdentNumCooling, tlpAtsConfigOverVoltageThreshold=tlpAtsConfigOverVoltageThreshold, tlpKvm=tlpKvm, tlpUpsIdentNumBypass=tlpUpsIdentNumBypass, tlpUpsDeviceMainLoadState=tlpUpsDeviceMainLoadState, tlpAtsIdentNumHeatsinks=tlpAtsIdentNumHeatsinks, tlpAgentAttributesAutostartHTTP=tlpAgentAttributesAutostartHTTP, tlpNotificationsAlarmEntryRemoved=tlpNotificationsAlarmEntryRemoved, tlpAtsConfigLowVoltageTransfer=tlpAtsConfigLowVoltageTransfer, tlpPduAlarmLoadOff12=tlpPduAlarmLoadOff12, tlpUpsAlarmInputBad=tlpUpsAlarmInputBad, tlpAtsOutletGroupName=tlpAtsOutletGroupName, tlpAtsInputPhaseType=tlpAtsInputPhaseType, tlpAlarmUserDefined08=tlpAlarmUserDefined08, tlpKvmIdent=tlpKvmIdent, tlpUpsIdentEntry=tlpUpsIdentEntry, tlpAtsDisplayAutoScroll=tlpAtsDisplayAutoScroll, tlpUpsBatteryDetailEntry=tlpUpsBatteryDetailEntry, tlpAtsConfigThresholdTable=tlpAtsConfigThresholdTable, tlpPduOutletPower=tlpPduOutletPower, tlpUpsAlarmFanFailure=tlpUpsAlarmFanFailure, tlpUpsConfigLowBatteryThreshold=tlpUpsConfigLowBatteryThreshold, tlpCoolingAlarmAutoCoolingOn=tlpCoolingAlarmAutoCoolingOn, tlpDeviceAlarms=tlpDeviceAlarms, tlpAtsOutletTable=tlpAtsOutletTable, tlpUpsConfigThresholdEntry=tlpUpsConfigThresholdEntry, tlpEnvAlarmOutputContact03=tlpEnvAlarmOutputContact03, tlpAtsInputPhaseTable=tlpAtsInputPhaseTable, tlpUpsInputLineBads=tlpUpsInputLineBads, tlpCoolingAlarmPressureGaugeFailure=tlpCoolingAlarmPressureGaugeFailure, tlpAtsHeatsinkIndex=tlpAtsHeatsinkIndex, tlpPduInputNominalVoltage=tlpPduInputNominalVoltage, tlpAtsInputSourceAvailability=tlpAtsInputSourceAvailability, tlpAgentAttributesSupportsFTP=tlpAgentAttributesSupportsFTP, tlpPduOutletGroupCommand=tlpPduOutletGroupCommand, tlpPduAlarmLoadOff15=tlpPduAlarmLoadOff15, tlpAtsDisplayEntry=tlpAtsDisplayEntry, tlpPduAlarmLoadOff32=tlpPduAlarmLoadOff32, tlpEnvHumidityInAlarm=tlpEnvHumidityInAlarm, tlpAtsOutputVoltage=tlpAtsOutputVoltage, tlpAtsDeviceEntry=tlpAtsDeviceEntry, tlpUpsConfigInputVoltage=tlpUpsConfigInputVoltage, tlpKvmConfig=tlpKvmConfig, tlpPduAlarmCircuitBreakerOpen05=tlpPduAlarmCircuitBreakerOpen05, tlpUpsControlUpsOn=tlpUpsControlUpsOn, tlpAtsOutletState=tlpAtsOutletState, tlpPduIdentTable=tlpPduIdentTable, tlpPduOutletCurrent=tlpPduOutletCurrent, tlpAtsBreaker=tlpAtsBreaker, tlpUpsAlarmLoadOff12=tlpUpsAlarmLoadOff12, tlpAgentIdent=tlpAgentIdent, tlpAtsHeatsinkStatus=tlpAtsHeatsinkStatus, tlpAlarmControlIndex=tlpAlarmControlIndex, tlpPduDeviceTotalInputPowerRating=tlpPduDeviceTotalInputPowerRating, tlpUpsAlarmLoadOff01=tlpUpsAlarmLoadOff01, tlpPduDevicePhaseImbalance=tlpPduDevicePhaseImbalance, tlpPduOutletTable=tlpPduOutletTable, tlpUpsIdentNumOutputs=tlpUpsIdentNumOutputs, tlpAtsAlarmLoadOff25=tlpAtsAlarmLoadOff25, tlpPduCircuitCurrentLimit=tlpPduCircuitCurrentLimit, tlpAtsOutletCommand=tlpAtsOutletCommand, tlpAtsConfigThresholdEntry=tlpAtsConfigThresholdEntry, tlpEnvInputContactNormalState=tlpEnvInputContactNormalState, tlpAtsOutletGroup=tlpAtsOutletGroup, tlpPduInputCurrentLimit=tlpPduInputCurrentLimit, tlpAtsConfigVoltageRangeLimitsTable=tlpAtsConfigVoltageRangeLimitsTable, tlpAtsInputPhaseVoltageMax=tlpAtsInputPhaseVoltageMax)
mibBuilder.exportSymbols("TRIPPLITE-PRODUCTS", tlpEnvDetail=tlpEnvDetail, tlpAtsCircuitTable=tlpAtsCircuitTable, tlpPduOutletCommand=tlpPduOutletCommand, tlpUpsBatteryPackConfigTable=tlpUpsBatteryPackConfigTable, tlpPduAlarmLoadOff20=tlpPduAlarmLoadOff20, tlpAtsAlarmSource2OverVoltage=tlpAtsAlarmSource2OverVoltage, tlpNotifySystemShutdown=tlpNotifySystemShutdown, tlpUpsIdentNumPhases=tlpUpsIdentNumPhases, tlpPduAlarmLoadOff37=tlpPduAlarmLoadOff37, tlpUpsBypassEntry=tlpUpsBypassEntry, tlpUpsAlarmLoadOff03=tlpUpsAlarmLoadOff03, tlpAtsCircuitIndex=tlpAtsCircuitIndex, tlpPduHeatsinkStatus=tlpPduHeatsinkStatus, tlpAtsAlarmCircuitBreakerOpen=tlpAtsAlarmCircuitBreakerOpen, tlpUpsAlarmLoadOff04=tlpUpsAlarmLoadOff04, tlpAtsSupportsOutletCurrentPower=tlpAtsSupportsOutletCurrentPower, tlpUpsAlarmCurrentAboveThreshold1=tlpUpsAlarmCurrentAboveThreshold1, tlpAtsIdentNumAts=tlpAtsIdentNumAts, tlpPduOutletVoltage=tlpPduOutletVoltage, tlpAtsOutletRampAction=tlpAtsOutletRampAction, tlpPduBreaker=tlpPduBreaker, tlpPduAlarmLoadOff08=tlpPduAlarmLoadOff08, tlpAtsOutletGroupCommand=tlpAtsOutletGroupCommand, tlpEnvTemperatureLowLimit=tlpEnvTemperatureLowLimit, tlpPduOutletGroup=tlpPduOutletGroup, tlpAtsAlarmLoadOff33=tlpAtsAlarmLoadOff33, tlpDeviceIdentProtocol=tlpDeviceIdentProtocol, tlpUpsBypassLineIndex=tlpUpsBypassLineIndex, tlpAgentAlarms=tlpAgentAlarms, tlpPduIdentNumPdu=tlpPduIdentNumPdu, tlpUpsSupportsOutletVoltage=tlpUpsSupportsOutletVoltage, tlpPduCircuitPhase=tlpPduCircuitPhase, tlpAtsAlarmLoadOff24=tlpAtsAlarmLoadOff24, tlpPduDeviceMainLoadState=tlpPduDeviceMainLoadState, tlpUpsAlarmInverterCircuitBad=tlpUpsAlarmInverterCircuitBad, tlpPduBreakerTable=tlpPduBreakerTable, tlpUpsOutletState=tlpUpsOutletState, tlpAtsInputBadTransferVoltage=tlpAtsInputBadTransferVoltage, tlpUpsOutletRampDelay=tlpUpsOutletRampDelay, tlpUpsOutputLineCurrent=tlpUpsOutputLineCurrent, tlpPduAlarmLoadOff16=tlpPduAlarmLoadOff16, tlpUpsOutputTable=tlpUpsOutputTable, tlpAgentAttributesSSHCLIPort=tlpAgentAttributesSSHCLIPort, tlpAlarmTable=tlpAlarmTable, tlpAtsAlarmSystemTemperature=tlpAtsAlarmSystemTemperature, tlpPduAlarmCircuitBreakerOpen03=tlpPduAlarmCircuitBreakerOpen03, tlpUpsAlarmLoadOff05=tlpUpsAlarmLoadOff05, tlpCooling=tlpCooling, tlpAtsSupportsOutletGroup=tlpAtsSupportsOutletGroup, tlpUpsConfigBypassUpperLimitPercent=tlpUpsConfigBypassUpperLimitPercent, tlpEnvOutputContactTable=tlpEnvOutputContactTable, tlpAtsAlarmGeneralFault=tlpAtsAlarmGeneralFault, tlpSwitchControl=tlpSwitchControl, tlpAtsControlAtsReboot=tlpAtsControlAtsReboot, tlpPduInputLowTransferVoltageLowerBound=tlpPduInputLowTransferVoltageLowerBound, tlpUpsAlarmLoadOff30=tlpUpsAlarmLoadOff30, tlpAgentAttributes=tlpAgentAttributes, tlpPduSupportsEntry=tlpPduSupportsEntry, tlpUpsWatchdogTable=tlpUpsWatchdogTable, tlpAtsDisplayIntensity=tlpAtsDisplayIntensity, tlpUpsAlarmInverterOverVoltage=tlpUpsAlarmInverterOverVoltage, tlpAtsConfig=tlpAtsConfig, tlpUpsAlarmLoadOff09=tlpUpsAlarmLoadOff09, tlpCoolingAlarmStartupLinePressureImbalance=tlpCoolingAlarmStartupLinePressureImbalance, tlpAtsAlarmLoadOff26=tlpAtsAlarmLoadOff26, tlpDeviceIdentHardwareVersion=tlpDeviceIdentHardwareVersion, tlpAtsAlarmLoadOff10=tlpAtsAlarmLoadOff10, tlpAlarmTableRef=tlpAlarmTableRef, tlpUpsInputNominalVoltage=tlpUpsInputNominalVoltage, tlpUpsBatteryPackIdentFirmware=tlpUpsBatteryPackIdentFirmware, tlpAtsInputHighTransferVoltageLowerBound=tlpAtsInputHighTransferVoltageLowerBound, tlpAtsAlarmLoadOff30=tlpAtsAlarmLoadOff30, tlpUpsInputHighTransferVoltageUpperBound=tlpUpsInputHighTransferVoltageUpperBound, tlpUpsOutputLineIndex=tlpUpsOutputLineIndex, tlpUpsSecondsOnBattery=tlpUpsSecondsOnBattery, tlpAtsDeviceOutputPowerTotal=tlpAtsDeviceOutputPowerTotal, tlpUpsDeviceTemperatureC=tlpUpsDeviceTemperatureC, tlpUpsAlarmLoadLevelAboveThresholdPhase2=tlpUpsAlarmLoadLevelAboveThresholdPhase2, tlpAgentAttributesSupportsTelnetCLI=tlpAgentAttributesSupportsTelnetCLI, tlpUpsAlarmLoadOff40=tlpUpsAlarmLoadOff40, tlpUpsAlarmExternalNonSmartBatteryAgeAboveThreshold=tlpUpsAlarmExternalNonSmartBatteryAgeAboveThreshold, tlpUpsInputEntry=tlpUpsInputEntry, tlpPduInputPhaseCurrent=tlpPduInputPhaseCurrent, tlpUpsConfigOverLoadThreshold=tlpUpsConfigOverLoadThreshold, tlpAtsAlarmFrequency=tlpAtsAlarmFrequency, tlpAtsAlarmCircuitBreakerOpen03=tlpAtsAlarmCircuitBreakerOpen03, tlpUpsBypassLineTable=tlpUpsBypassLineTable, tlpPduDeviceTemperatureF=tlpPduDeviceTemperatureF, tlpAgentAttributesSupportsHTTPS=tlpAgentAttributesSupportsHTTPS, tlpAtsAlarmSource2Outage=tlpAtsAlarmSource2Outage, tlpUpsBatterySummaryEntry=tlpUpsBatterySummaryEntry, tlpEnvAlarms=tlpEnvAlarms, tlpEnvHumidityHighLimit=tlpEnvHumidityHighLimit, tlpUpsBypassLinePower=tlpUpsBypassLinePower, tlpAtsAlarmLoadOff34=tlpAtsAlarmLoadOff34, tlpUpsBatteryPackConfigBatteriesPerString=tlpUpsBatteryPackConfigBatteriesPerString, tlpKvmDetail=tlpKvmDetail, tlpAtsAlarmLoadOff04=tlpAtsAlarmLoadOff04, tlpCoolingAlarmEvaporatorFreezeUp=tlpCoolingAlarmEvaporatorFreezeUp, tlpUpsOutlet=tlpUpsOutlet, tlpDeviceName=tlpDeviceName, tlpEnvIdentNumEnvirosense=tlpEnvIdentNumEnvirosense, tlpUpsBatteryPackDetailNextReplaceDate=tlpUpsBatteryPackDetailNextReplaceDate, tlpPduOutputPhaseType=tlpPduOutputPhaseType, tlpAtsSupportsTable=tlpAtsSupportsTable, tlpPduAlarmLoadOff33=tlpPduAlarmLoadOff33, tlpAtsControlAtsOff=tlpAtsControlAtsOff, tlpPduDisplayAutoScroll=tlpPduDisplayAutoScroll, tlpPduAlarmCircuitBreakerOpen04=tlpPduAlarmCircuitBreakerOpen04, tlpPduHeatsink=tlpPduHeatsink, tlpAtsConfigSourceBrownoutSetMinimum=tlpAtsConfigSourceBrownoutSetMinimum, tlpUpsEstimatedChargeRemaining=tlpUpsEstimatedChargeRemaining, tlpUpsOutletIndex=tlpUpsOutletIndex, tlpCoolingOutput=tlpCoolingOutput, tlpAtsCircuitTotalPower=tlpAtsCircuitTotalPower, tlpEnvInputContactTable=tlpEnvInputContactTable, tlpAtsConfigVoltageRangeEntry=tlpAtsConfigVoltageRangeEntry, tlpUpsAlarmLoadOff38=tlpUpsAlarmLoadOff38, tlpUpsConfigBypassLowerLimitVoltage=tlpUpsConfigBypassLowerLimitVoltage, tlpAgentAttributesSupportsHTTP=tlpAgentAttributesSupportsHTTP, tlpEnvHumidityLowLimit=tlpEnvHumidityLowLimit, tlpAtsDevicePhaseImbalance=tlpAtsDevicePhaseImbalance, tlpUpsBypassLineVoltage=tlpUpsBypassLineVoltage, tlpUpsAlarmLoadOff08=tlpUpsAlarmLoadOff08, tlpUpsConfigInputFrequency=tlpUpsConfigInputFrequency, tlpUpsAlarmLoadOff16=tlpUpsAlarmLoadOff16, tlpUpsOutletName=tlpUpsOutletName, tlpPduControlShed=tlpPduControlShed, tlpPduAlarmCircuitBreakerOpen01=tlpPduAlarmCircuitBreakerOpen01, tlpNotifySystemUpdate=tlpNotifySystemUpdate, tlpAtsIdentNumPhases=tlpAtsIdentNumPhases, tlpPduHeatsinkIndex=tlpPduHeatsinkIndex, tlpAtsDetail=tlpAtsDetail, tlpAtsAlarmCircuitBreakerOpen02=tlpAtsAlarmCircuitBreakerOpen02, tlpDeviceTypes=tlpDeviceTypes, tlpDeviceIdentCommPortName=tlpDeviceIdentCommPortName, tlpAtsDisplayScheme=tlpAtsDisplayScheme, tlpUpsAlarmCurrentAboveThreshold=tlpUpsAlarmCurrentAboveThreshold, tlpEnvHumidityTable=tlpEnvHumidityTable, tlpAgentAttributesSupportsSSHCLI=tlpAgentAttributesSupportsSSHCLI, tlpUpsInputLowTransferVoltageLowerBound=tlpUpsInputLowTransferVoltageLowerBound, tlpAtsDeviceOutputCurrentPrecision=tlpAtsDeviceOutputCurrentPrecision, tlpPduOutputPhase=tlpPduOutputPhase, tlpAtsControlEntry=tlpAtsControlEntry, tlpAtsInputNominalVoltage=tlpAtsInputNominalVoltage, tlpUpsBatteryPackDetailAge=tlpUpsBatteryPackDetailAge, tlpUpsConfigAutoRestartOverTemperature=tlpUpsConfigAutoRestartOverTemperature, tlpAtsDevicePowerOnDelay=tlpAtsDevicePowerOnDelay, tlpAtsCircuitCurrentMax=tlpAtsCircuitCurrentMax, tlpPduAlarmLoadOff34=tlpPduAlarmLoadOff34, tlpPduDisplayEntry=tlpPduDisplayEntry, tlpUpsAlarmEPOActive=tlpUpsAlarmEPOActive, tlpPduConfigTable=tlpPduConfigTable, tlpAtsConfigLowVoltageReset=tlpAtsConfigLowVoltageReset, tlpUpsConfigAutoRestartInverterShutdown=tlpUpsConfigAutoRestartInverterShutdown, tlpUpsAlarmLoadOff21=tlpUpsAlarmLoadOff21, tlpAtsAlarmLoadOff37=tlpAtsAlarmLoadOff37, tlpPduAlarmLoadOff03=tlpPduAlarmLoadOff03, tlpUpsIdentNumBatteryPacks=tlpUpsIdentNumBatteryPacks, tlpDeviceEntry=tlpDeviceEntry, tlpUpsAlarmChargerFailed=tlpUpsAlarmChargerFailed, tlpUpsOutputFrequency=tlpUpsOutputFrequency, tlpAtsConfigVoltageRangeLimitsEntry=tlpAtsConfigVoltageRangeLimitsEntry, tlpEnvTemperatureTable=tlpEnvTemperatureTable, tlpUpsConfigAutoRestartAfterShutdown=tlpUpsConfigAutoRestartAfterShutdown, tlpPduAlarmLoadOff24=tlpPduAlarmLoadOff24, tlpAtsConfigSource1TransferReset=tlpAtsConfigSource1TransferReset, tlpUpsBatteryPackConfigDesignCapacity=tlpUpsBatteryPackConfigDesignCapacity, tlpProducts=tlpProducts, tlpUpsConfigAutoRestartTable=tlpUpsConfigAutoRestartTable, tlpUpsAlarmBypassFrequencyBad=tlpUpsAlarmBypassFrequencyBad, tlpAtsIdentEntry=tlpAtsIdentEntry, tlpAtsConfigOverTemperatureThreshold=tlpAtsConfigOverTemperatureThreshold, tlpUpsOutletCommand=tlpUpsOutletCommand, tlpAtsIdentNumBreakers=tlpAtsIdentNumBreakers, tlpUpsAlarmBypassBad=tlpUpsAlarmBypassBad, tlpAgentAttributesAutostartFTP=tlpAgentAttributesAutostartFTP, tlpPduDeviceOutputPowerTotal=tlpPduDeviceOutputPowerTotal, tlpUpsBatteryPackDetailCycleCount=tlpUpsBatteryPackDetailCycleCount, tlpPduDetail=tlpPduDetail, tlpPduOutputTable=tlpPduOutputTable, tlpUpsAlarmLoadOff27=tlpUpsAlarmLoadOff27, tlpUpsConfigBypassUpperLimitVoltage=tlpUpsConfigBypassUpperLimitVoltage, tlpPduInputPhaseIndex=tlpPduInputPhaseIndex, tlpPduSupportsEnergywise=tlpPduSupportsEnergywise, tlpPduCircuitEntry=tlpPduCircuitEntry, tlpPduOutputIndex=tlpPduOutputIndex, tlpUpsAlarmLoadOff36=tlpUpsAlarmLoadOff36, tlpAgentContacts=tlpAgentContacts, tlpCoolingIdent=tlpCoolingIdent, tlpAgentAttributesHTTPSPort=tlpAgentAttributesHTTPSPort, tlpUpsOutputLinePower=tlpUpsOutputLinePower, tlpCoolingControl=tlpCoolingControl, tlpPduInputLowTransferVoltageUpperBound=tlpPduInputLowTransferVoltageUpperBound, tlpUpsConfigBypassLowerLimitPercent=tlpUpsConfigBypassLowerLimitPercent, tlpAgentEmailContactRowStatus=tlpAgentEmailContactRowStatus, tlpDeviceRegion=tlpDeviceRegion, tlpDeviceIdentCommPortType=tlpDeviceIdentCommPortType, tlpAlarmUserDefined01=tlpAlarmUserDefined01, tlpPduInputHighTransferVoltageUpperBound=tlpPduInputHighTransferVoltageUpperBound, tlpAtsCircuitUtilization=tlpAtsCircuitUtilization, tlpAtsSupportsEntry=tlpAtsSupportsEntry, tlpUpsControlSelfTest=tlpUpsControlSelfTest, tlpAtsAlarmLoadOff29=tlpAtsAlarmLoadOff29, tlpUpsBatteryPackIdentModel=tlpUpsBatteryPackIdentModel, tlpUpsDeviceMainLoadControllable=tlpUpsDeviceMainLoadControllable, tlpAtsAlarmCurrentAboveThresholdB3=tlpAtsAlarmCurrentAboveThresholdB3, tlpAgentAttributesSupportsSSHMenu=tlpAgentAttributesSupportsSSHMenu, tlpUpsOutputLineTable=tlpUpsOutputLineTable, tlpUpsControlUpsReboot=tlpUpsControlUpsReboot, tlpUpsAlarmLoadOff18=tlpUpsAlarmLoadOff18, tlpPduOutletShedDelay=tlpPduOutletShedDelay, tlpUpsBatteryPackDetailTemperatureC=tlpUpsBatteryPackDetailTemperatureC, tlpUpsControlEntry=tlpUpsControlEntry, tlpUpsBatteryRunTimeRemaining=tlpUpsBatteryRunTimeRemaining, tlpUpsAlarmBatteryOverVoltage=tlpUpsAlarmBatteryOverVoltage, tlpAtsAlarmSource1OverVoltage=tlpAtsAlarmSource1OverVoltage, tlpAtsInputFairVoltageThreshold=tlpAtsInputFairVoltageThreshold, tlpUpsAlarmOverCharged=tlpUpsAlarmOverCharged, tlpAgentAttributesAutostartSNMP=tlpAgentAttributesAutostartSNMP, tlpUpsSupportsEnergywise=tlpUpsSupportsEnergywise, tlpPduOutletControllable=tlpPduOutletControllable, tlpAtsIdentTable=tlpAtsIdentTable, tlpUpsDeviceMainLoadCommand=tlpUpsDeviceMainLoadCommand, tlpUpsControlTable=tlpUpsControlTable, tlpPduOutletRampAction=tlpPduOutletRampAction, tlpDeviceTable=tlpDeviceTable, tlpAtsOutletDescription=tlpAtsOutletDescription, tlpDeviceIdentTable=tlpDeviceIdentTable, tlpAtsAlarmLoadOff14=tlpAtsAlarmLoadOff14, tlpDeviceIndex=tlpDeviceIndex, tlpUpsAlarmFuseFailure=tlpUpsAlarmFuseFailure, tlpAlarmId=tlpAlarmId, tlpPduOutletGroupState=tlpPduOutletGroupState, tlpAgentSnmpContactPrivPassword=tlpAgentSnmpContactPrivPassword, tlpUpsAlarmBatteryBad=tlpUpsAlarmBatteryBad, tlpAlarmUserDefined02=tlpAlarmUserDefined02, tlpUpsInputPhaseVoltageMin=tlpUpsInputPhaseVoltageMin, tlpPduCircuitUtilization=tlpPduCircuitUtilization, tlpRackTrackDevice=tlpRackTrackDevice, tlpPduSupportsRampShed=tlpPduSupportsRampShed, tlpUpsInputPhasePower=tlpUpsInputPhasePower, tlpPduDeviceAggregatePowerFactor=tlpPduDeviceAggregatePowerFactor, tlpUpsAlarmLoadLevelAboveThresholdPhase3=tlpUpsAlarmLoadLevelAboveThresholdPhase3, tlpUpsBatteryStatus=tlpUpsBatteryStatus, tlpAtsControlRamp=tlpAtsControlRamp, tlpAtsConfigHighVoltageTransfer=tlpAtsConfigHighVoltageTransfer, tlpUpsControlShed=tlpUpsControlShed, tlpPduAlarmLoadOff10=tlpPduAlarmLoadOff10, tlpAtsAlarmLoadOff36=tlpAtsAlarmLoadOff36)
